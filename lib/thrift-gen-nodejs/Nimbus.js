//
// Autogenerated by Thrift Compiler (0.9.1)
//
// DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
//
var Thrift = require('../thrift').Thrift;

var ttypes = require('./storm_types');
//HELPER FUNCTIONS AND STRUCTURES

Nimbus_submitTopology_args = function(args) {
  this.name = null;
  this.uploadedJarLocation = null;
  this.jsonConf = null;
  this.topology = null;
  if (args) {
    if (args.name !== undefined) {
      this.name = args.name;
    }
    if (args.uploadedJarLocation !== undefined) {
      this.uploadedJarLocation = args.uploadedJarLocation;
    }
    if (args.jsonConf !== undefined) {
      this.jsonConf = args.jsonConf;
    }
    if (args.topology !== undefined) {
      this.topology = args.topology;
    }
  }
};
Nimbus_submitTopology_args.prototype = {};
Nimbus_submitTopology_args.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
      if (ftype == Thrift.Type.STRING) {
        this.name = input.readString();
      } else {
        input.skip(ftype);
      }
      break;
      case 2:
      if (ftype == Thrift.Type.STRING) {
        this.uploadedJarLocation = input.readString();
      } else {
        input.skip(ftype);
      }
      break;
      case 3:
      if (ftype == Thrift.Type.STRING) {
        this.jsonConf = input.readString();
      } else {
        input.skip(ftype);
      }
      break;
      case 4:
      if (ftype == Thrift.Type.STRUCT) {
        this.topology = new ttypes.StormTopology();
        this.topology.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

Nimbus_submitTopology_args.prototype.write = function(output) {
  output.writeStructBegin('Nimbus_submitTopology_args');
  if (this.name !== null && this.name !== undefined) {
    output.writeFieldBegin('name', Thrift.Type.STRING, 1);
    output.writeString(this.name);
    output.writeFieldEnd();
  }
  if (this.uploadedJarLocation !== null && this.uploadedJarLocation !== undefined) {
    output.writeFieldBegin('uploadedJarLocation', Thrift.Type.STRING, 2);
    output.writeString(this.uploadedJarLocation);
    output.writeFieldEnd();
  }
  if (this.jsonConf !== null && this.jsonConf !== undefined) {
    output.writeFieldBegin('jsonConf', Thrift.Type.STRING, 3);
    output.writeString(this.jsonConf);
    output.writeFieldEnd();
  }
  if (this.topology !== null && this.topology !== undefined) {
    output.writeFieldBegin('topology', Thrift.Type.STRUCT, 4);
    this.topology.write(output);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

Nimbus_submitTopology_result = function(args) {
  this.e = null;
  this.ite = null;
  if (args instanceof ttypes.AlreadyAliveException) {
    this.e = args;
    return;
  }
  if (args instanceof ttypes.InvalidTopologyException) {
    this.ite = args;
    return;
  }
  if (args) {
    if (args.e !== undefined) {
      this.e = args.e;
    }
    if (args.ite !== undefined) {
      this.ite = args.ite;
    }
  }
};
Nimbus_submitTopology_result.prototype = {};
Nimbus_submitTopology_result.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
      if (ftype == Thrift.Type.STRUCT) {
        this.e = new ttypes.AlreadyAliveException();
        this.e.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      case 2:
      if (ftype == Thrift.Type.STRUCT) {
        this.ite = new ttypes.InvalidTopologyException();
        this.ite.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

Nimbus_submitTopology_result.prototype.write = function(output) {
  output.writeStructBegin('Nimbus_submitTopology_result');
  if (this.e !== null && this.e !== undefined) {
    output.writeFieldBegin('e', Thrift.Type.STRUCT, 1);
    this.e.write(output);
    output.writeFieldEnd();
  }
  if (this.ite !== null && this.ite !== undefined) {
    output.writeFieldBegin('ite', Thrift.Type.STRUCT, 2);
    this.ite.write(output);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

Nimbus_submitTopologyWithOpts_args = function(args) {
  this.name = null;
  this.uploadedJarLocation = null;
  this.jsonConf = null;
  this.topology = null;
  this.options = null;
  if (args) {
    if (args.name !== undefined) {
      this.name = args.name;
    }
    if (args.uploadedJarLocation !== undefined) {
      this.uploadedJarLocation = args.uploadedJarLocation;
    }
    if (args.jsonConf !== undefined) {
      this.jsonConf = args.jsonConf;
    }
    if (args.topology !== undefined) {
      this.topology = args.topology;
    }
    if (args.options !== undefined) {
      this.options = args.options;
    }
  }
};
Nimbus_submitTopologyWithOpts_args.prototype = {};
Nimbus_submitTopologyWithOpts_args.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
      if (ftype == Thrift.Type.STRING) {
        this.name = input.readString();
      } else {
        input.skip(ftype);
      }
      break;
      case 2:
      if (ftype == Thrift.Type.STRING) {
        this.uploadedJarLocation = input.readString();
      } else {
        input.skip(ftype);
      }
      break;
      case 3:
      if (ftype == Thrift.Type.STRING) {
        this.jsonConf = input.readString();
      } else {
        input.skip(ftype);
      }
      break;
      case 4:
      if (ftype == Thrift.Type.STRUCT) {
        this.topology = new ttypes.StormTopology();
        this.topology.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      case 5:
      if (ftype == Thrift.Type.STRUCT) {
        this.options = new ttypes.SubmitOptions();
        this.options.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

Nimbus_submitTopologyWithOpts_args.prototype.write = function(output) {
  output.writeStructBegin('Nimbus_submitTopologyWithOpts_args');
  if (this.name !== null && this.name !== undefined) {
    output.writeFieldBegin('name', Thrift.Type.STRING, 1);
    output.writeString(this.name);
    output.writeFieldEnd();
  }
  if (this.uploadedJarLocation !== null && this.uploadedJarLocation !== undefined) {
    output.writeFieldBegin('uploadedJarLocation', Thrift.Type.STRING, 2);
    output.writeString(this.uploadedJarLocation);
    output.writeFieldEnd();
  }
  if (this.jsonConf !== null && this.jsonConf !== undefined) {
    output.writeFieldBegin('jsonConf', Thrift.Type.STRING, 3);
    output.writeString(this.jsonConf);
    output.writeFieldEnd();
  }
  if (this.topology !== null && this.topology !== undefined) {
    output.writeFieldBegin('topology', Thrift.Type.STRUCT, 4);
    this.topology.write(output);
    output.writeFieldEnd();
  }
  if (this.options !== null && this.options !== undefined) {
    output.writeFieldBegin('options', Thrift.Type.STRUCT, 5);
    this.options.write(output);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

Nimbus_submitTopologyWithOpts_result = function(args) {
  this.e = null;
  this.ite = null;
  if (args instanceof ttypes.AlreadyAliveException) {
    this.e = args;
    return;
  }
  if (args instanceof ttypes.InvalidTopologyException) {
    this.ite = args;
    return;
  }
  if (args) {
    if (args.e !== undefined) {
      this.e = args.e;
    }
    if (args.ite !== undefined) {
      this.ite = args.ite;
    }
  }
};
Nimbus_submitTopologyWithOpts_result.prototype = {};
Nimbus_submitTopologyWithOpts_result.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
      if (ftype == Thrift.Type.STRUCT) {
        this.e = new ttypes.AlreadyAliveException();
        this.e.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      case 2:
      if (ftype == Thrift.Type.STRUCT) {
        this.ite = new ttypes.InvalidTopologyException();
        this.ite.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

Nimbus_submitTopologyWithOpts_result.prototype.write = function(output) {
  output.writeStructBegin('Nimbus_submitTopologyWithOpts_result');
  if (this.e !== null && this.e !== undefined) {
    output.writeFieldBegin('e', Thrift.Type.STRUCT, 1);
    this.e.write(output);
    output.writeFieldEnd();
  }
  if (this.ite !== null && this.ite !== undefined) {
    output.writeFieldBegin('ite', Thrift.Type.STRUCT, 2);
    this.ite.write(output);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

Nimbus_killTopology_args = function(args) {
  this.name = null;
  if (args) {
    if (args.name !== undefined) {
      this.name = args.name;
    }
  }
};
Nimbus_killTopology_args.prototype = {};
Nimbus_killTopology_args.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
      if (ftype == Thrift.Type.STRING) {
        this.name = input.readString();
      } else {
        input.skip(ftype);
      }
      break;
      case 0:
        input.skip(ftype);
        break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

Nimbus_killTopology_args.prototype.write = function(output) {
  output.writeStructBegin('Nimbus_killTopology_args');
  if (this.name !== null && this.name !== undefined) {
    output.writeFieldBegin('name', Thrift.Type.STRING, 1);
    output.writeString(this.name);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

Nimbus_killTopology_result = function(args) {
  this.e = null;
  if (args instanceof ttypes.NotAliveException) {
    this.e = args;
    return;
  }
  if (args) {
    if (args.e !== undefined) {
      this.e = args.e;
    }
  }
};
Nimbus_killTopology_result.prototype = {};
Nimbus_killTopology_result.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
      if (ftype == Thrift.Type.STRUCT) {
        this.e = new ttypes.NotAliveException();
        this.e.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      case 0:
        input.skip(ftype);
        break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

Nimbus_killTopology_result.prototype.write = function(output) {
  output.writeStructBegin('Nimbus_killTopology_result');
  if (this.e !== null && this.e !== undefined) {
    output.writeFieldBegin('e', Thrift.Type.STRUCT, 1);
    this.e.write(output);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

Nimbus_killTopologyWithOpts_args = function(args) {
  this.name = null;
  this.options = null;
  if (args) {
    if (args.name !== undefined) {
      this.name = args.name;
    }
    if (args.options !== undefined) {
      this.options = args.options;
    }
  }
};
Nimbus_killTopologyWithOpts_args.prototype = {};
Nimbus_killTopologyWithOpts_args.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
      if (ftype == Thrift.Type.STRING) {
        this.name = input.readString();
      } else {
        input.skip(ftype);
      }
      break;
      case 2:
      if (ftype == Thrift.Type.STRUCT) {
        this.options = new ttypes.KillOptions();
        this.options.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

Nimbus_killTopologyWithOpts_args.prototype.write = function(output) {
  output.writeStructBegin('Nimbus_killTopologyWithOpts_args');
  if (this.name !== null && this.name !== undefined) {
    output.writeFieldBegin('name', Thrift.Type.STRING, 1);
    output.writeString(this.name);
    output.writeFieldEnd();
  }
  if (this.options !== null && this.options !== undefined) {
    output.writeFieldBegin('options', Thrift.Type.STRUCT, 2);
    this.options.write(output);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

Nimbus_killTopologyWithOpts_result = function(args) {
  this.e = null;
  if (args instanceof ttypes.NotAliveException) {
    this.e = args;
    return;
  }
  if (args) {
    if (args.e !== undefined) {
      this.e = args.e;
    }
  }
};
Nimbus_killTopologyWithOpts_result.prototype = {};
Nimbus_killTopologyWithOpts_result.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
      if (ftype == Thrift.Type.STRUCT) {
        this.e = new ttypes.NotAliveException();
        this.e.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      case 0:
        input.skip(ftype);
        break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

Nimbus_killTopologyWithOpts_result.prototype.write = function(output) {
  output.writeStructBegin('Nimbus_killTopologyWithOpts_result');
  if (this.e !== null && this.e !== undefined) {
    output.writeFieldBegin('e', Thrift.Type.STRUCT, 1);
    this.e.write(output);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

Nimbus_activate_args = function(args) {
  this.name = null;
  if (args) {
    if (args.name !== undefined) {
      this.name = args.name;
    }
  }
};
Nimbus_activate_args.prototype = {};
Nimbus_activate_args.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
      if (ftype == Thrift.Type.STRING) {
        this.name = input.readString();
      } else {
        input.skip(ftype);
      }
      break;
      case 0:
        input.skip(ftype);
        break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

Nimbus_activate_args.prototype.write = function(output) {
  output.writeStructBegin('Nimbus_activate_args');
  if (this.name !== null && this.name !== undefined) {
    output.writeFieldBegin('name', Thrift.Type.STRING, 1);
    output.writeString(this.name);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

Nimbus_activate_result = function(args) {
  this.e = null;
  if (args instanceof ttypes.NotAliveException) {
    this.e = args;
    return;
  }
  if (args) {
    if (args.e !== undefined) {
      this.e = args.e;
    }
  }
};
Nimbus_activate_result.prototype = {};
Nimbus_activate_result.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
      if (ftype == Thrift.Type.STRUCT) {
        this.e = new ttypes.NotAliveException();
        this.e.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      case 0:
        input.skip(ftype);
        break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

Nimbus_activate_result.prototype.write = function(output) {
  output.writeStructBegin('Nimbus_activate_result');
  if (this.e !== null && this.e !== undefined) {
    output.writeFieldBegin('e', Thrift.Type.STRUCT, 1);
    this.e.write(output);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

Nimbus_deactivate_args = function(args) {
  this.name = null;
  if (args) {
    if (args.name !== undefined) {
      this.name = args.name;
    }
  }
};
Nimbus_deactivate_args.prototype = {};
Nimbus_deactivate_args.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
      if (ftype == Thrift.Type.STRING) {
        this.name = input.readString();
      } else {
        input.skip(ftype);
      }
      break;
      case 0:
        input.skip(ftype);
        break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

Nimbus_deactivate_args.prototype.write = function(output) {
  output.writeStructBegin('Nimbus_deactivate_args');
  if (this.name !== null && this.name !== undefined) {
    output.writeFieldBegin('name', Thrift.Type.STRING, 1);
    output.writeString(this.name);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

Nimbus_deactivate_result = function(args) {
  this.e = null;
  if (args instanceof ttypes.NotAliveException) {
    this.e = args;
    return;
  }
  if (args) {
    if (args.e !== undefined) {
      this.e = args.e;
    }
  }
};
Nimbus_deactivate_result.prototype = {};
Nimbus_deactivate_result.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
      if (ftype == Thrift.Type.STRUCT) {
        this.e = new ttypes.NotAliveException();
        this.e.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      case 0:
        input.skip(ftype);
        break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

Nimbus_deactivate_result.prototype.write = function(output) {
  output.writeStructBegin('Nimbus_deactivate_result');
  if (this.e !== null && this.e !== undefined) {
    output.writeFieldBegin('e', Thrift.Type.STRUCT, 1);
    this.e.write(output);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

Nimbus_rebalance_args = function(args) {
  this.name = null;
  this.options = null;
  if (args) {
    if (args.name !== undefined) {
      this.name = args.name;
    }
    if (args.options !== undefined) {
      this.options = args.options;
    }
  }
};
Nimbus_rebalance_args.prototype = {};
Nimbus_rebalance_args.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
      if (ftype == Thrift.Type.STRING) {
        this.name = input.readString();
      } else {
        input.skip(ftype);
      }
      break;
      case 2:
      if (ftype == Thrift.Type.STRUCT) {
        this.options = new ttypes.RebalanceOptions();
        this.options.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

Nimbus_rebalance_args.prototype.write = function(output) {
  output.writeStructBegin('Nimbus_rebalance_args');
  if (this.name !== null && this.name !== undefined) {
    output.writeFieldBegin('name', Thrift.Type.STRING, 1);
    output.writeString(this.name);
    output.writeFieldEnd();
  }
  if (this.options !== null && this.options !== undefined) {
    output.writeFieldBegin('options', Thrift.Type.STRUCT, 2);
    this.options.write(output);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

Nimbus_rebalance_result = function(args) {
  this.e = null;
  this.ite = null;
  if (args instanceof ttypes.NotAliveException) {
    this.e = args;
    return;
  }
  if (args instanceof ttypes.InvalidTopologyException) {
    this.ite = args;
    return;
  }
  if (args) {
    if (args.e !== undefined) {
      this.e = args.e;
    }
    if (args.ite !== undefined) {
      this.ite = args.ite;
    }
  }
};
Nimbus_rebalance_result.prototype = {};
Nimbus_rebalance_result.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
      if (ftype == Thrift.Type.STRUCT) {
        this.e = new ttypes.NotAliveException();
        this.e.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      case 2:
      if (ftype == Thrift.Type.STRUCT) {
        this.ite = new ttypes.InvalidTopologyException();
        this.ite.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

Nimbus_rebalance_result.prototype.write = function(output) {
  output.writeStructBegin('Nimbus_rebalance_result');
  if (this.e !== null && this.e !== undefined) {
    output.writeFieldBegin('e', Thrift.Type.STRUCT, 1);
    this.e.write(output);
    output.writeFieldEnd();
  }
  if (this.ite !== null && this.ite !== undefined) {
    output.writeFieldBegin('ite', Thrift.Type.STRUCT, 2);
    this.ite.write(output);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

Nimbus_beginFileUpload_args = function(args) {
};
Nimbus_beginFileUpload_args.prototype = {};
Nimbus_beginFileUpload_args.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    input.skip(ftype);
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

Nimbus_beginFileUpload_args.prototype.write = function(output) {
  output.writeStructBegin('Nimbus_beginFileUpload_args');
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

Nimbus_beginFileUpload_result = function(args) {
  this.success = null;
  if (args) {
    if (args.success !== undefined) {
      this.success = args.success;
    }
  }
};
Nimbus_beginFileUpload_result.prototype = {};
Nimbus_beginFileUpload_result.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 0:
      if (ftype == Thrift.Type.STRING) {
        this.success = input.readString();
      } else {
        input.skip(ftype);
      }
      break;
      case 0:
        input.skip(ftype);
        break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

Nimbus_beginFileUpload_result.prototype.write = function(output) {
  output.writeStructBegin('Nimbus_beginFileUpload_result');
  if (this.success !== null && this.success !== undefined) {
    output.writeFieldBegin('success', Thrift.Type.STRING, 0);
    output.writeString(this.success);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

Nimbus_uploadChunk_args = function(args) {
  this.location = null;
  this.chunk = null;
  if (args) {
    if (args.location !== undefined) {
      this.location = args.location;
    }
    if (args.chunk !== undefined) {
      this.chunk = args.chunk;
    }
  }
};
Nimbus_uploadChunk_args.prototype = {};
Nimbus_uploadChunk_args.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
      if (ftype == Thrift.Type.STRING) {
        this.location = input.readString();
      } else {
        input.skip(ftype);
      }
      break;
      case 2:
      if (ftype == Thrift.Type.STRING) {
        this.chunk = input.readString();
      } else {
        input.skip(ftype);
      }
      break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

Nimbus_uploadChunk_args.prototype.write = function(output) {
  output.writeStructBegin('Nimbus_uploadChunk_args');
  if (this.location !== null && this.location !== undefined) {
    output.writeFieldBegin('location', Thrift.Type.STRING, 1);
    output.writeString(this.location);
    output.writeFieldEnd();
  }
  if (this.chunk !== null && this.chunk !== undefined) {
    output.writeFieldBegin('chunk', Thrift.Type.STRING, 2);
    output.writeString(this.chunk);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

Nimbus_uploadChunk_result = function(args) {
};
Nimbus_uploadChunk_result.prototype = {};
Nimbus_uploadChunk_result.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    input.skip(ftype);
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

Nimbus_uploadChunk_result.prototype.write = function(output) {
  output.writeStructBegin('Nimbus_uploadChunk_result');
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

Nimbus_finishFileUpload_args = function(args) {
  this.location = null;
  if (args) {
    if (args.location !== undefined) {
      this.location = args.location;
    }
  }
};
Nimbus_finishFileUpload_args.prototype = {};
Nimbus_finishFileUpload_args.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
      if (ftype == Thrift.Type.STRING) {
        this.location = input.readString();
      } else {
        input.skip(ftype);
      }
      break;
      case 0:
        input.skip(ftype);
        break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

Nimbus_finishFileUpload_args.prototype.write = function(output) {
  output.writeStructBegin('Nimbus_finishFileUpload_args');
  if (this.location !== null && this.location !== undefined) {
    output.writeFieldBegin('location', Thrift.Type.STRING, 1);
    output.writeString(this.location);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

Nimbus_finishFileUpload_result = function(args) {
};
Nimbus_finishFileUpload_result.prototype = {};
Nimbus_finishFileUpload_result.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    input.skip(ftype);
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

Nimbus_finishFileUpload_result.prototype.write = function(output) {
  output.writeStructBegin('Nimbus_finishFileUpload_result');
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

Nimbus_beginFileDownload_args = function(args) {
  this.file = null;
  if (args) {
    if (args.file !== undefined) {
      this.file = args.file;
    }
  }
};
Nimbus_beginFileDownload_args.prototype = {};
Nimbus_beginFileDownload_args.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
      if (ftype == Thrift.Type.STRING) {
        this.file = input.readString();
      } else {
        input.skip(ftype);
      }
      break;
      case 0:
        input.skip(ftype);
        break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

Nimbus_beginFileDownload_args.prototype.write = function(output) {
  output.writeStructBegin('Nimbus_beginFileDownload_args');
  if (this.file !== null && this.file !== undefined) {
    output.writeFieldBegin('file', Thrift.Type.STRING, 1);
    output.writeString(this.file);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

Nimbus_beginFileDownload_result = function(args) {
  this.success = null;
  if (args) {
    if (args.success !== undefined) {
      this.success = args.success;
    }
  }
};
Nimbus_beginFileDownload_result.prototype = {};
Nimbus_beginFileDownload_result.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 0:
      if (ftype == Thrift.Type.STRING) {
        this.success = input.readString();
      } else {
        input.skip(ftype);
      }
      break;
      case 0:
        input.skip(ftype);
        break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

Nimbus_beginFileDownload_result.prototype.write = function(output) {
  output.writeStructBegin('Nimbus_beginFileDownload_result');
  if (this.success !== null && this.success !== undefined) {
    output.writeFieldBegin('success', Thrift.Type.STRING, 0);
    output.writeString(this.success);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

Nimbus_downloadChunk_args = function(args) {
  this.id = null;
  if (args) {
    if (args.id !== undefined) {
      this.id = args.id;
    }
  }
};
Nimbus_downloadChunk_args.prototype = {};
Nimbus_downloadChunk_args.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
      if (ftype == Thrift.Type.STRING) {
        this.id = input.readString();
      } else {
        input.skip(ftype);
      }
      break;
      case 0:
        input.skip(ftype);
        break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

Nimbus_downloadChunk_args.prototype.write = function(output) {
  output.writeStructBegin('Nimbus_downloadChunk_args');
  if (this.id !== null && this.id !== undefined) {
    output.writeFieldBegin('id', Thrift.Type.STRING, 1);
    output.writeString(this.id);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

Nimbus_downloadChunk_result = function(args) {
  this.success = null;
  if (args) {
    if (args.success !== undefined) {
      this.success = args.success;
    }
  }
};
Nimbus_downloadChunk_result.prototype = {};
Nimbus_downloadChunk_result.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 0:
      if (ftype == Thrift.Type.STRING) {
        this.success = input.readString();
      } else {
        input.skip(ftype);
      }
      break;
      case 0:
        input.skip(ftype);
        break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

Nimbus_downloadChunk_result.prototype.write = function(output) {
  output.writeStructBegin('Nimbus_downloadChunk_result');
  if (this.success !== null && this.success !== undefined) {
    output.writeFieldBegin('success', Thrift.Type.STRING, 0);
    output.writeString(this.success);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

Nimbus_getNimbusConf_args = function(args) {
};
Nimbus_getNimbusConf_args.prototype = {};
Nimbus_getNimbusConf_args.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    input.skip(ftype);
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

Nimbus_getNimbusConf_args.prototype.write = function(output) {
  output.writeStructBegin('Nimbus_getNimbusConf_args');
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

Nimbus_getNimbusConf_result = function(args) {
  this.success = null;
  if (args) {
    if (args.success !== undefined) {
      this.success = args.success;
    }
  }
};
Nimbus_getNimbusConf_result.prototype = {};
Nimbus_getNimbusConf_result.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 0:
      if (ftype == Thrift.Type.STRING) {
        this.success = input.readString();
      } else {
        input.skip(ftype);
      }
      break;
      case 0:
        input.skip(ftype);
        break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

Nimbus_getNimbusConf_result.prototype.write = function(output) {
  output.writeStructBegin('Nimbus_getNimbusConf_result');
  if (this.success !== null && this.success !== undefined) {
    output.writeFieldBegin('success', Thrift.Type.STRING, 0);
    output.writeString(this.success);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

Nimbus_getClusterInfo_args = function(args) {
};
Nimbus_getClusterInfo_args.prototype = {};
Nimbus_getClusterInfo_args.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    input.skip(ftype);
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

Nimbus_getClusterInfo_args.prototype.write = function(output) {
  output.writeStructBegin('Nimbus_getClusterInfo_args');
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

Nimbus_getClusterInfo_result = function(args) {
  this.success = null;
  if (args) {
    if (args.success !== undefined) {
      this.success = args.success;
    }
  }
};
Nimbus_getClusterInfo_result.prototype = {};
Nimbus_getClusterInfo_result.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 0:
      if (ftype == Thrift.Type.STRUCT) {
        this.success = new ttypes.ClusterSummary();
        this.success.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      case 0:
        input.skip(ftype);
        break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

Nimbus_getClusterInfo_result.prototype.write = function(output) {
  output.writeStructBegin('Nimbus_getClusterInfo_result');
  if (this.success !== null && this.success !== undefined) {
    output.writeFieldBegin('success', Thrift.Type.STRUCT, 0);
    this.success.write(output);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

Nimbus_getTopologyInfo_args = function(args) {
  this.id = null;
  if (args) {
    if (args.id !== undefined) {
      this.id = args.id;
    }
  }
};
Nimbus_getTopologyInfo_args.prototype = {};
Nimbus_getTopologyInfo_args.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
      if (ftype == Thrift.Type.STRING) {
        this.id = input.readString();
      } else {
        input.skip(ftype);
      }
      break;
      case 0:
        input.skip(ftype);
        break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

Nimbus_getTopologyInfo_args.prototype.write = function(output) {
  output.writeStructBegin('Nimbus_getTopologyInfo_args');
  if (this.id !== null && this.id !== undefined) {
    output.writeFieldBegin('id', Thrift.Type.STRING, 1);
    output.writeString(this.id);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

Nimbus_getTopologyInfo_result = function(args) {
  this.success = null;
  this.e = null;
  if (args instanceof ttypes.NotAliveException) {
    this.e = args;
    return;
  }
  if (args) {
    if (args.success !== undefined) {
      this.success = args.success;
    }
    if (args.e !== undefined) {
      this.e = args.e;
    }
  }
};
Nimbus_getTopologyInfo_result.prototype = {};
Nimbus_getTopologyInfo_result.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 0:
      if (ftype == Thrift.Type.STRUCT) {
        this.success = new ttypes.TopologyInfo();
        this.success.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      case 1:
      if (ftype == Thrift.Type.STRUCT) {
        this.e = new ttypes.NotAliveException();
        this.e.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

Nimbus_getTopologyInfo_result.prototype.write = function(output) {
  output.writeStructBegin('Nimbus_getTopologyInfo_result');
  if (this.success !== null && this.success !== undefined) {
    output.writeFieldBegin('success', Thrift.Type.STRUCT, 0);
    this.success.write(output);
    output.writeFieldEnd();
  }
  if (this.e !== null && this.e !== undefined) {
    output.writeFieldBegin('e', Thrift.Type.STRUCT, 1);
    this.e.write(output);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

Nimbus_getTopologyConf_args = function(args) {
  this.id = null;
  if (args) {
    if (args.id !== undefined) {
      this.id = args.id;
    }
  }
};
Nimbus_getTopologyConf_args.prototype = {};
Nimbus_getTopologyConf_args.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
      if (ftype == Thrift.Type.STRING) {
        this.id = input.readString();
      } else {
        input.skip(ftype);
      }
      break;
      case 0:
        input.skip(ftype);
        break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

Nimbus_getTopologyConf_args.prototype.write = function(output) {
  output.writeStructBegin('Nimbus_getTopologyConf_args');
  if (this.id !== null && this.id !== undefined) {
    output.writeFieldBegin('id', Thrift.Type.STRING, 1);
    output.writeString(this.id);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

Nimbus_getTopologyConf_result = function(args) {
  this.success = null;
  this.e = null;
  if (args instanceof ttypes.NotAliveException) {
    this.e = args;
    return;
  }
  if (args) {
    if (args.success !== undefined) {
      this.success = args.success;
    }
    if (args.e !== undefined) {
      this.e = args.e;
    }
  }
};
Nimbus_getTopologyConf_result.prototype = {};
Nimbus_getTopologyConf_result.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 0:
      if (ftype == Thrift.Type.STRING) {
        this.success = input.readString();
      } else {
        input.skip(ftype);
      }
      break;
      case 1:
      if (ftype == Thrift.Type.STRUCT) {
        this.e = new ttypes.NotAliveException();
        this.e.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

Nimbus_getTopologyConf_result.prototype.write = function(output) {
  output.writeStructBegin('Nimbus_getTopologyConf_result');
  if (this.success !== null && this.success !== undefined) {
    output.writeFieldBegin('success', Thrift.Type.STRING, 0);
    output.writeString(this.success);
    output.writeFieldEnd();
  }
  if (this.e !== null && this.e !== undefined) {
    output.writeFieldBegin('e', Thrift.Type.STRUCT, 1);
    this.e.write(output);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

Nimbus_getTopology_args = function(args) {
  this.id = null;
  if (args) {
    if (args.id !== undefined) {
      this.id = args.id;
    }
  }
};
Nimbus_getTopology_args.prototype = {};
Nimbus_getTopology_args.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
      if (ftype == Thrift.Type.STRING) {
        this.id = input.readString();
      } else {
        input.skip(ftype);
      }
      break;
      case 0:
        input.skip(ftype);
        break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

Nimbus_getTopology_args.prototype.write = function(output) {
  output.writeStructBegin('Nimbus_getTopology_args');
  if (this.id !== null && this.id !== undefined) {
    output.writeFieldBegin('id', Thrift.Type.STRING, 1);
    output.writeString(this.id);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

Nimbus_getTopology_result = function(args) {
  this.success = null;
  this.e = null;
  if (args instanceof ttypes.NotAliveException) {
    this.e = args;
    return;
  }
  if (args) {
    if (args.success !== undefined) {
      this.success = args.success;
    }
    if (args.e !== undefined) {
      this.e = args.e;
    }
  }
};
Nimbus_getTopology_result.prototype = {};
Nimbus_getTopology_result.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 0:
      if (ftype == Thrift.Type.STRUCT) {
        this.success = new ttypes.StormTopology();
        this.success.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      case 1:
      if (ftype == Thrift.Type.STRUCT) {
        this.e = new ttypes.NotAliveException();
        this.e.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

Nimbus_getTopology_result.prototype.write = function(output) {
  output.writeStructBegin('Nimbus_getTopology_result');
  if (this.success !== null && this.success !== undefined) {
    output.writeFieldBegin('success', Thrift.Type.STRUCT, 0);
    this.success.write(output);
    output.writeFieldEnd();
  }
  if (this.e !== null && this.e !== undefined) {
    output.writeFieldBegin('e', Thrift.Type.STRUCT, 1);
    this.e.write(output);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

Nimbus_getUserTopology_args = function(args) {
  this.id = null;
  if (args) {
    if (args.id !== undefined) {
      this.id = args.id;
    }
  }
};
Nimbus_getUserTopology_args.prototype = {};
Nimbus_getUserTopology_args.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
      if (ftype == Thrift.Type.STRING) {
        this.id = input.readString();
      } else {
        input.skip(ftype);
      }
      break;
      case 0:
        input.skip(ftype);
        break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

Nimbus_getUserTopology_args.prototype.write = function(output) {
  output.writeStructBegin('Nimbus_getUserTopology_args');
  if (this.id !== null && this.id !== undefined) {
    output.writeFieldBegin('id', Thrift.Type.STRING, 1);
    output.writeString(this.id);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

Nimbus_getUserTopology_result = function(args) {
  this.success = null;
  this.e = null;
  if (args instanceof ttypes.NotAliveException) {
    this.e = args;
    return;
  }
  if (args) {
    if (args.success !== undefined) {
      this.success = args.success;
    }
    if (args.e !== undefined) {
      this.e = args.e;
    }
  }
};
Nimbus_getUserTopology_result.prototype = {};
Nimbus_getUserTopology_result.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 0:
      if (ftype == Thrift.Type.STRUCT) {
        this.success = new ttypes.StormTopology();
        this.success.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      case 1:
      if (ftype == Thrift.Type.STRUCT) {
        this.e = new ttypes.NotAliveException();
        this.e.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

Nimbus_getUserTopology_result.prototype.write = function(output) {
  output.writeStructBegin('Nimbus_getUserTopology_result');
  if (this.success !== null && this.success !== undefined) {
    output.writeFieldBegin('success', Thrift.Type.STRUCT, 0);
    this.success.write(output);
    output.writeFieldEnd();
  }
  if (this.e !== null && this.e !== undefined) {
    output.writeFieldBegin('e', Thrift.Type.STRUCT, 1);
    this.e.write(output);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

NimbusClient = exports.Client = function(output, pClass) {
    this.output = output;
    this.pClass = pClass;
    this.seqid = 0;
    this._reqs = {};
};
NimbusClient.prototype = {};
NimbusClient.prototype.submitTopology = function(name, uploadedJarLocation, jsonConf, topology, callback) {
  this.seqid += 1;
  this._reqs[this.seqid] = callback;
  this.send_submitTopology(name, uploadedJarLocation, jsonConf, topology);
};

NimbusClient.prototype.send_submitTopology = function(name, uploadedJarLocation, jsonConf, topology) {
  var output = new this.pClass(this.output);
  output.writeMessageBegin('submitTopology', Thrift.MessageType.CALL, this.seqid);
  var args = new Nimbus_submitTopology_args();
  args.name = name;
  args.uploadedJarLocation = uploadedJarLocation;
  args.jsonConf = jsonConf;
  args.topology = topology;
  args.write(output);
  output.writeMessageEnd();
  return this.output.flush();
};

NimbusClient.prototype.recv_submitTopology = function(input,mtype,rseqid) {
  var callback = this._reqs[rseqid] || function() {};
  delete this._reqs[rseqid];
  if (mtype == Thrift.MessageType.EXCEPTION) {
    var x = new Thrift.TApplicationException();
    x.read(input);
    input.readMessageEnd();
    return callback(x);
  }
  var result = new Nimbus_submitTopology_result();
  result.read(input);
  input.readMessageEnd();

  if (null !== result.e) {
    return callback(result.e);
  }
  if (null !== result.ite) {
    return callback(result.ite);
  }
  callback(null)
};
NimbusClient.prototype.submitTopologyWithOpts = function(name, uploadedJarLocation, jsonConf, topology, options, callback) {
  this.seqid += 1;
  this._reqs[this.seqid] = callback;
  this.send_submitTopologyWithOpts(name, uploadedJarLocation, jsonConf, topology, options);
};

NimbusClient.prototype.send_submitTopologyWithOpts = function(name, uploadedJarLocation, jsonConf, topology, options) {
  var output = new this.pClass(this.output);
  output.writeMessageBegin('submitTopologyWithOpts', Thrift.MessageType.CALL, this.seqid);
  var args = new Nimbus_submitTopologyWithOpts_args();
  args.name = name;
  args.uploadedJarLocation = uploadedJarLocation;
  args.jsonConf = jsonConf;
  args.topology = topology;
  args.options = options;
  args.write(output);
  output.writeMessageEnd();
  return this.output.flush();
};

NimbusClient.prototype.recv_submitTopologyWithOpts = function(input,mtype,rseqid) {
  var callback = this._reqs[rseqid] || function() {};
  delete this._reqs[rseqid];
  if (mtype == Thrift.MessageType.EXCEPTION) {
    var x = new Thrift.TApplicationException();
    x.read(input);
    input.readMessageEnd();
    return callback(x);
  }
  var result = new Nimbus_submitTopologyWithOpts_result();
  result.read(input);
  input.readMessageEnd();

  if (null !== result.e) {
    return callback(result.e);
  }
  if (null !== result.ite) {
    return callback(result.ite);
  }
  callback(null)
};
NimbusClient.prototype.killTopology = function(name, callback) {
  this.seqid += 1;
  this._reqs[this.seqid] = callback;
  this.send_killTopology(name);
};

NimbusClient.prototype.send_killTopology = function(name) {
  var output = new this.pClass(this.output);
  output.writeMessageBegin('killTopology', Thrift.MessageType.CALL, this.seqid);
  var args = new Nimbus_killTopology_args();
  args.name = name;
  args.write(output);
  output.writeMessageEnd();
  return this.output.flush();
};

NimbusClient.prototype.recv_killTopology = function(input,mtype,rseqid) {
  var callback = this._reqs[rseqid] || function() {};
  delete this._reqs[rseqid];
  if (mtype == Thrift.MessageType.EXCEPTION) {
    var x = new Thrift.TApplicationException();
    x.read(input);
    input.readMessageEnd();
    return callback(x);
  }
  var result = new Nimbus_killTopology_result();
  result.read(input);
  input.readMessageEnd();

  if (null !== result.e) {
    return callback(result.e);
  }
  callback(null)
};
NimbusClient.prototype.killTopologyWithOpts = function(name, options, callback) {
  this.seqid += 1;
  this._reqs[this.seqid] = callback;
  this.send_killTopologyWithOpts(name, options);
};

NimbusClient.prototype.send_killTopologyWithOpts = function(name, options) {
  var output = new this.pClass(this.output);
  output.writeMessageBegin('killTopologyWithOpts', Thrift.MessageType.CALL, this.seqid);
  var args = new Nimbus_killTopologyWithOpts_args();
  args.name = name;
  args.options = options;
  args.write(output);
  output.writeMessageEnd();
  return this.output.flush();
};

NimbusClient.prototype.recv_killTopologyWithOpts = function(input,mtype,rseqid) {
  var callback = this._reqs[rseqid] || function() {};
  delete this._reqs[rseqid];
  if (mtype == Thrift.MessageType.EXCEPTION) {
    var x = new Thrift.TApplicationException();
    x.read(input);
    input.readMessageEnd();
    return callback(x);
  }
  var result = new Nimbus_killTopologyWithOpts_result();
  result.read(input);
  input.readMessageEnd();

  if (null !== result.e) {
    return callback(result.e);
  }
  callback(null)
};
NimbusClient.prototype.activate = function(name, callback) {
  this.seqid += 1;
  this._reqs[this.seqid] = callback;
  this.send_activate(name);
};

NimbusClient.prototype.send_activate = function(name) {
  var output = new this.pClass(this.output);
  output.writeMessageBegin('activate', Thrift.MessageType.CALL, this.seqid);
  var args = new Nimbus_activate_args();
  args.name = name;
  args.write(output);
  output.writeMessageEnd();
  return this.output.flush();
};

NimbusClient.prototype.recv_activate = function(input,mtype,rseqid) {
  var callback = this._reqs[rseqid] || function() {};
  delete this._reqs[rseqid];
  if (mtype == Thrift.MessageType.EXCEPTION) {
    var x = new Thrift.TApplicationException();
    x.read(input);
    input.readMessageEnd();
    return callback(x);
  }
  var result = new Nimbus_activate_result();
  result.read(input);
  input.readMessageEnd();

  if (null !== result.e) {
    return callback(result.e);
  }
  callback(null)
};
NimbusClient.prototype.deactivate = function(name, callback) {
  this.seqid += 1;
  this._reqs[this.seqid] = callback;
  this.send_deactivate(name);
};

NimbusClient.prototype.send_deactivate = function(name) {
  var output = new this.pClass(this.output);
  output.writeMessageBegin('deactivate', Thrift.MessageType.CALL, this.seqid);
  var args = new Nimbus_deactivate_args();
  args.name = name;
  args.write(output);
  output.writeMessageEnd();
  return this.output.flush();
};

NimbusClient.prototype.recv_deactivate = function(input,mtype,rseqid) {
  var callback = this._reqs[rseqid] || function() {};
  delete this._reqs[rseqid];
  if (mtype == Thrift.MessageType.EXCEPTION) {
    var x = new Thrift.TApplicationException();
    x.read(input);
    input.readMessageEnd();
    return callback(x);
  }
  var result = new Nimbus_deactivate_result();
  result.read(input);
  input.readMessageEnd();

  if (null !== result.e) {
    return callback(result.e);
  }
  callback(null)
};
NimbusClient.prototype.rebalance = function(name, options, callback) {
  this.seqid += 1;
  this._reqs[this.seqid] = callback;
  this.send_rebalance(name, options);
};

NimbusClient.prototype.send_rebalance = function(name, options) {
  var output = new this.pClass(this.output);
  output.writeMessageBegin('rebalance', Thrift.MessageType.CALL, this.seqid);
  var args = new Nimbus_rebalance_args();
  args.name = name;
  args.options = options;
  args.write(output);
  output.writeMessageEnd();
  return this.output.flush();
};

NimbusClient.prototype.recv_rebalance = function(input,mtype,rseqid) {
  var callback = this._reqs[rseqid] || function() {};
  delete this._reqs[rseqid];
  if (mtype == Thrift.MessageType.EXCEPTION) {
    var x = new Thrift.TApplicationException();
    x.read(input);
    input.readMessageEnd();
    return callback(x);
  }
  var result = new Nimbus_rebalance_result();
  result.read(input);
  input.readMessageEnd();

  if (null !== result.e) {
    return callback(result.e);
  }
  if (null !== result.ite) {
    return callback(result.ite);
  }
  callback(null)
};
NimbusClient.prototype.beginFileUpload = function(callback) {
  this.seqid += 1;
  this._reqs[this.seqid] = callback;
  this.send_beginFileUpload();
};

NimbusClient.prototype.send_beginFileUpload = function() {
  var output = new this.pClass(this.output);
  output.writeMessageBegin('beginFileUpload', Thrift.MessageType.CALL, this.seqid);
  var args = new Nimbus_beginFileUpload_args();
  args.write(output);
  output.writeMessageEnd();
  return this.output.flush();
};

NimbusClient.prototype.recv_beginFileUpload = function(input,mtype,rseqid) {
  var callback = this._reqs[rseqid] || function() {};
  delete this._reqs[rseqid];
  if (mtype == Thrift.MessageType.EXCEPTION) {
    var x = new Thrift.TApplicationException();
    x.read(input);
    input.readMessageEnd();
    return callback(x);
  }
  var result = new Nimbus_beginFileUpload_result();
  result.read(input);
  input.readMessageEnd();

  if (null !== result.success) {
    return callback(null, result.success);
  }
  return callback('beginFileUpload failed: unknown result');
};
NimbusClient.prototype.uploadChunk = function(location, chunk, callback) {
  this.seqid += 1;
  this._reqs[this.seqid] = callback;
  this.send_uploadChunk(location, chunk);
};

NimbusClient.prototype.send_uploadChunk = function(location, chunk) {
  var output = new this.pClass(this.output);
  output.writeMessageBegin('uploadChunk', Thrift.MessageType.CALL, this.seqid);
  var args = new Nimbus_uploadChunk_args();
  args.location = location;
  args.chunk = chunk;
  args.write(output);
  output.writeMessageEnd();
  return this.output.flush();
};

NimbusClient.prototype.recv_uploadChunk = function(input,mtype,rseqid) {
  var callback = this._reqs[rseqid] || function() {};
  delete this._reqs[rseqid];
  if (mtype == Thrift.MessageType.EXCEPTION) {
    var x = new Thrift.TApplicationException();
    x.read(input);
    input.readMessageEnd();
    return callback(x);
  }
  var result = new Nimbus_uploadChunk_result();
  result.read(input);
  input.readMessageEnd();

  callback(null)
};
NimbusClient.prototype.finishFileUpload = function(location, callback) {
  this.seqid += 1;
  this._reqs[this.seqid] = callback;
  this.send_finishFileUpload(location);
};

NimbusClient.prototype.send_finishFileUpload = function(location) {
  var output = new this.pClass(this.output);
  output.writeMessageBegin('finishFileUpload', Thrift.MessageType.CALL, this.seqid);
  var args = new Nimbus_finishFileUpload_args();
  args.location = location;
  args.write(output);
  output.writeMessageEnd();
  return this.output.flush();
};

NimbusClient.prototype.recv_finishFileUpload = function(input,mtype,rseqid) {
  var callback = this._reqs[rseqid] || function() {};
  delete this._reqs[rseqid];
  if (mtype == Thrift.MessageType.EXCEPTION) {
    var x = new Thrift.TApplicationException();
    x.read(input);
    input.readMessageEnd();
    return callback(x);
  }
  var result = new Nimbus_finishFileUpload_result();
  result.read(input);
  input.readMessageEnd();

  callback(null)
};
NimbusClient.prototype.beginFileDownload = function(file, callback) {
  this.seqid += 1;
  this._reqs[this.seqid] = callback;
  this.send_beginFileDownload(file);
};

NimbusClient.prototype.send_beginFileDownload = function(file) {
  var output = new this.pClass(this.output);
  output.writeMessageBegin('beginFileDownload', Thrift.MessageType.CALL, this.seqid);
  var args = new Nimbus_beginFileDownload_args();
  args.file = file;
  args.write(output);
  output.writeMessageEnd();
  return this.output.flush();
};

NimbusClient.prototype.recv_beginFileDownload = function(input,mtype,rseqid) {
  var callback = this._reqs[rseqid] || function() {};
  delete this._reqs[rseqid];
  if (mtype == Thrift.MessageType.EXCEPTION) {
    var x = new Thrift.TApplicationException();
    x.read(input);
    input.readMessageEnd();
    return callback(x);
  }
  var result = new Nimbus_beginFileDownload_result();
  result.read(input);
  input.readMessageEnd();

  if (null !== result.success) {
    return callback(null, result.success);
  }
  return callback('beginFileDownload failed: unknown result');
};
NimbusClient.prototype.downloadChunk = function(id, callback) {
  this.seqid += 1;
  this._reqs[this.seqid] = callback;
  this.send_downloadChunk(id);
};

NimbusClient.prototype.send_downloadChunk = function(id) {
  var output = new this.pClass(this.output);
  output.writeMessageBegin('downloadChunk', Thrift.MessageType.CALL, this.seqid);
  var args = new Nimbus_downloadChunk_args();
  args.id = id;
  args.write(output);
  output.writeMessageEnd();
  return this.output.flush();
};

NimbusClient.prototype.recv_downloadChunk = function(input,mtype,rseqid) {
  var callback = this._reqs[rseqid] || function() {};
  delete this._reqs[rseqid];
  if (mtype == Thrift.MessageType.EXCEPTION) {
    var x = new Thrift.TApplicationException();
    x.read(input);
    input.readMessageEnd();
    return callback(x);
  }
  var result = new Nimbus_downloadChunk_result();
  result.read(input);
  input.readMessageEnd();

  if (null !== result.success) {
    return callback(null, result.success);
  }
  return callback('downloadChunk failed: unknown result');
};
NimbusClient.prototype.getNimbusConf = function(callback) {
  this.seqid += 1;
  this._reqs[this.seqid] = callback;
  this.send_getNimbusConf();
};

NimbusClient.prototype.send_getNimbusConf = function() {
  var output = new this.pClass(this.output);
  output.writeMessageBegin('getNimbusConf', Thrift.MessageType.CALL, this.seqid);
  var args = new Nimbus_getNimbusConf_args();
  args.write(output);
  output.writeMessageEnd();
  return this.output.flush();
};

NimbusClient.prototype.recv_getNimbusConf = function(input,mtype,rseqid) {
  var callback = this._reqs[rseqid] || function() {};
  delete this._reqs[rseqid];
  if (mtype == Thrift.MessageType.EXCEPTION) {
    var x = new Thrift.TApplicationException();
    x.read(input);
    input.readMessageEnd();
    return callback(x);
  }
  var result = new Nimbus_getNimbusConf_result();
  result.read(input);
  input.readMessageEnd();

  if (null !== result.success) {
    return callback(null, result.success);
  }
  return callback('getNimbusConf failed: unknown result');
};
NimbusClient.prototype.getClusterInfo = function(callback) {
  this.seqid += 1;
  this._reqs[this.seqid] = callback;
  this.send_getClusterInfo();
};

NimbusClient.prototype.send_getClusterInfo = function() {
  var output = new this.pClass(this.output);
  output.writeMessageBegin('getClusterInfo', Thrift.MessageType.CALL, this.seqid);
  var args = new Nimbus_getClusterInfo_args();
  args.write(output);
  output.writeMessageEnd();
  return this.output.flush();
};

NimbusClient.prototype.recv_getClusterInfo = function(input,mtype,rseqid) {
  var callback = this._reqs[rseqid] || function() {};
  delete this._reqs[rseqid];
  if (mtype == Thrift.MessageType.EXCEPTION) {
    var x = new Thrift.TApplicationException();
    x.read(input);
    input.readMessageEnd();
    return callback(x);
  }
  var result = new Nimbus_getClusterInfo_result();
  result.read(input);
  input.readMessageEnd();

  if (null !== result.success) {
    return callback(null, result.success);
  }
  return callback('getClusterInfo failed: unknown result');
};
NimbusClient.prototype.getTopologyInfo = function(id, callback) {
  this.seqid += 1;
  this._reqs[this.seqid] = callback;
  this.send_getTopologyInfo(id);
};

NimbusClient.prototype.send_getTopologyInfo = function(id) {
  var output = new this.pClass(this.output);
  output.writeMessageBegin('getTopologyInfo', Thrift.MessageType.CALL, this.seqid);
  var args = new Nimbus_getTopologyInfo_args();
  args.id = id;
  args.write(output);
  output.writeMessageEnd();
  return this.output.flush();
};

NimbusClient.prototype.recv_getTopologyInfo = function(input,mtype,rseqid) {
  var callback = this._reqs[rseqid] || function() {};
  delete this._reqs[rseqid];
  if (mtype == Thrift.MessageType.EXCEPTION) {
    var x = new Thrift.TApplicationException();
    x.read(input);
    input.readMessageEnd();
    return callback(x);
  }
  var result = new Nimbus_getTopologyInfo_result();
  result.read(input);
  input.readMessageEnd();

  if (null !== result.e) {
    return callback(result.e);
  }
  if (null !== result.success) {
    return callback(null, result.success);
  }
  return callback('getTopologyInfo failed: unknown result');
};
NimbusClient.prototype.getTopologyConf = function(id, callback) {
  this.seqid += 1;
  this._reqs[this.seqid] = callback;
  this.send_getTopologyConf(id);
};

NimbusClient.prototype.send_getTopologyConf = function(id) {
  var output = new this.pClass(this.output);
  output.writeMessageBegin('getTopologyConf', Thrift.MessageType.CALL, this.seqid);
  var args = new Nimbus_getTopologyConf_args();
  args.id = id;
  args.write(output);
  output.writeMessageEnd();
  return this.output.flush();
};

NimbusClient.prototype.recv_getTopologyConf = function(input,mtype,rseqid) {
  var callback = this._reqs[rseqid] || function() {};
  delete this._reqs[rseqid];
  if (mtype == Thrift.MessageType.EXCEPTION) {
    var x = new Thrift.TApplicationException();
    x.read(input);
    input.readMessageEnd();
    return callback(x);
  }
  var result = new Nimbus_getTopologyConf_result();
  result.read(input);
  input.readMessageEnd();

  if (null !== result.e) {
    return callback(result.e);
  }
  if (null !== result.success) {
    return callback(null, result.success);
  }
  return callback('getTopologyConf failed: unknown result');
};
NimbusClient.prototype.getTopology = function(id, callback) {
  this.seqid += 1;
  this._reqs[this.seqid] = callback;
  this.send_getTopology(id);
};

NimbusClient.prototype.send_getTopology = function(id) {
  var output = new this.pClass(this.output);
  output.writeMessageBegin('getTopology', Thrift.MessageType.CALL, this.seqid);
  var args = new Nimbus_getTopology_args();
  args.id = id;
  args.write(output);
  output.writeMessageEnd();
  return this.output.flush();
};

NimbusClient.prototype.recv_getTopology = function(input,mtype,rseqid) {
  var callback = this._reqs[rseqid] || function() {};
  delete this._reqs[rseqid];
  if (mtype == Thrift.MessageType.EXCEPTION) {
    var x = new Thrift.TApplicationException();
    x.read(input);
    input.readMessageEnd();
    return callback(x);
  }
  var result = new Nimbus_getTopology_result();
  result.read(input);
  input.readMessageEnd();

  if (null !== result.e) {
    return callback(result.e);
  }
  if (null !== result.success) {
    return callback(null, result.success);
  }
  return callback('getTopology failed: unknown result');
};
NimbusClient.prototype.getUserTopology = function(id, callback) {
  this.seqid += 1;
  this._reqs[this.seqid] = callback;
  this.send_getUserTopology(id);
};

NimbusClient.prototype.send_getUserTopology = function(id) {
  var output = new this.pClass(this.output);
  output.writeMessageBegin('getUserTopology', Thrift.MessageType.CALL, this.seqid);
  var args = new Nimbus_getUserTopology_args();
  args.id = id;
  args.write(output);
  output.writeMessageEnd();
  return this.output.flush();
};

NimbusClient.prototype.recv_getUserTopology = function(input,mtype,rseqid) {
  var callback = this._reqs[rseqid] || function() {};
  delete this._reqs[rseqid];
  if (mtype == Thrift.MessageType.EXCEPTION) {
    var x = new Thrift.TApplicationException();
    x.read(input);
    input.readMessageEnd();
    return callback(x);
  }
  var result = new Nimbus_getUserTopology_result();
  result.read(input);
  input.readMessageEnd();

  if (null !== result.e) {
    return callback(result.e);
  }
  if (null !== result.success) {
    return callback(null, result.success);
  }
  return callback('getUserTopology failed: unknown result');
};
NimbusProcessor = exports.Processor = function(handler) {
  this._handler = handler
}
NimbusProcessor.prototype.process = function(input, output) {
  var r = input.readMessageBegin();
  if (this['process_' + r.fname]) {
    return this['process_' + r.fname].call(this, r.rseqid, input, output);
  } else {
    input.skip(Thrift.Type.STRUCT);
    input.readMessageEnd();
    var x = new Thrift.TApplicationException(Thrift.TApplicationExceptionType.UNKNOWN_METHOD, 'Unknown function ' + r.fname);
    output.writeMessageBegin(r.fname, Thrift.MessageType.Exception, r.rseqid);
    x.write(output);
    output.writeMessageEnd();
    output.flush();
  }
}

NimbusProcessor.prototype.process_submitTopology = function(seqid, input, output) {
  var args = new Nimbus_submitTopology_args();
  args.read(input);
  input.readMessageEnd();
  this._handler.submitTopology(args.name, args.uploadedJarLocation, args.jsonConf, args.topology, function (err, result) {
    var result = new Nimbus_submitTopology_result((err != null ? err : {success: result}));
    output.writeMessageBegin("submitTopology", Thrift.MessageType.REPLY, seqid);
    result.write(output);
    output.writeMessageEnd();
    output.flush();
  })
}

NimbusProcessor.prototype.process_submitTopologyWithOpts = function(seqid, input, output) {
  var args = new Nimbus_submitTopologyWithOpts_args();
  args.read(input);
  input.readMessageEnd();
  this._handler.submitTopologyWithOpts(args.name, args.uploadedJarLocation, args.jsonConf, args.topology, args.options, function (err, result) {
    var result = new Nimbus_submitTopologyWithOpts_result((err != null ? err : {success: result}));
    output.writeMessageBegin("submitTopologyWithOpts", Thrift.MessageType.REPLY, seqid);
    result.write(output);
    output.writeMessageEnd();
    output.flush();
  })
}

NimbusProcessor.prototype.process_killTopology = function(seqid, input, output) {
  var args = new Nimbus_killTopology_args();
  args.read(input);
  input.readMessageEnd();
  this._handler.killTopology(args.name, function (err, result) {
    var result = new Nimbus_killTopology_result((err != null ? err : {success: result}));
    output.writeMessageBegin("killTopology", Thrift.MessageType.REPLY, seqid);
    result.write(output);
    output.writeMessageEnd();
    output.flush();
  })
}

NimbusProcessor.prototype.process_killTopologyWithOpts = function(seqid, input, output) {
  var args = new Nimbus_killTopologyWithOpts_args();
  args.read(input);
  input.readMessageEnd();
  this._handler.killTopologyWithOpts(args.name, args.options, function (err, result) {
    var result = new Nimbus_killTopologyWithOpts_result((err != null ? err : {success: result}));
    output.writeMessageBegin("killTopologyWithOpts", Thrift.MessageType.REPLY, seqid);
    result.write(output);
    output.writeMessageEnd();
    output.flush();
  })
}

NimbusProcessor.prototype.process_activate = function(seqid, input, output) {
  var args = new Nimbus_activate_args();
  args.read(input);
  input.readMessageEnd();
  this._handler.activate(args.name, function (err, result) {
    var result = new Nimbus_activate_result((err != null ? err : {success: result}));
    output.writeMessageBegin("activate", Thrift.MessageType.REPLY, seqid);
    result.write(output);
    output.writeMessageEnd();
    output.flush();
  })
}

NimbusProcessor.prototype.process_deactivate = function(seqid, input, output) {
  var args = new Nimbus_deactivate_args();
  args.read(input);
  input.readMessageEnd();
  this._handler.deactivate(args.name, function (err, result) {
    var result = new Nimbus_deactivate_result((err != null ? err : {success: result}));
    output.writeMessageBegin("deactivate", Thrift.MessageType.REPLY, seqid);
    result.write(output);
    output.writeMessageEnd();
    output.flush();
  })
}

NimbusProcessor.prototype.process_rebalance = function(seqid, input, output) {
  var args = new Nimbus_rebalance_args();
  args.read(input);
  input.readMessageEnd();
  this._handler.rebalance(args.name, args.options, function (err, result) {
    var result = new Nimbus_rebalance_result((err != null ? err : {success: result}));
    output.writeMessageBegin("rebalance", Thrift.MessageType.REPLY, seqid);
    result.write(output);
    output.writeMessageEnd();
    output.flush();
  })
}

NimbusProcessor.prototype.process_beginFileUpload = function(seqid, input, output) {
  var args = new Nimbus_beginFileUpload_args();
  args.read(input);
  input.readMessageEnd();
  this._handler.beginFileUpload(function (err, result) {
    var result = new Nimbus_beginFileUpload_result((err != null ? err : {success: result}));
    output.writeMessageBegin("beginFileUpload", Thrift.MessageType.REPLY, seqid);
    result.write(output);
    output.writeMessageEnd();
    output.flush();
  })
}

NimbusProcessor.prototype.process_uploadChunk = function(seqid, input, output) {
  var args = new Nimbus_uploadChunk_args();
  args.read(input);
  input.readMessageEnd();
  this._handler.uploadChunk(args.location, args.chunk, function (err, result) {
    var result = new Nimbus_uploadChunk_result((err != null ? err : {success: result}));
    output.writeMessageBegin("uploadChunk", Thrift.MessageType.REPLY, seqid);
    result.write(output);
    output.writeMessageEnd();
    output.flush();
  })
}

NimbusProcessor.prototype.process_finishFileUpload = function(seqid, input, output) {
  var args = new Nimbus_finishFileUpload_args();
  args.read(input);
  input.readMessageEnd();
  this._handler.finishFileUpload(args.location, function (err, result) {
    var result = new Nimbus_finishFileUpload_result((err != null ? err : {success: result}));
    output.writeMessageBegin("finishFileUpload", Thrift.MessageType.REPLY, seqid);
    result.write(output);
    output.writeMessageEnd();
    output.flush();
  })
}

NimbusProcessor.prototype.process_beginFileDownload = function(seqid, input, output) {
  var args = new Nimbus_beginFileDownload_args();
  args.read(input);
  input.readMessageEnd();
  this._handler.beginFileDownload(args.file, function (err, result) {
    var result = new Nimbus_beginFileDownload_result((err != null ? err : {success: result}));
    output.writeMessageBegin("beginFileDownload", Thrift.MessageType.REPLY, seqid);
    result.write(output);
    output.writeMessageEnd();
    output.flush();
  })
}

NimbusProcessor.prototype.process_downloadChunk = function(seqid, input, output) {
  var args = new Nimbus_downloadChunk_args();
  args.read(input);
  input.readMessageEnd();
  this._handler.downloadChunk(args.id, function (err, result) {
    var result = new Nimbus_downloadChunk_result((err != null ? err : {success: result}));
    output.writeMessageBegin("downloadChunk", Thrift.MessageType.REPLY, seqid);
    result.write(output);
    output.writeMessageEnd();
    output.flush();
  })
}

NimbusProcessor.prototype.process_getNimbusConf = function(seqid, input, output) {
  var args = new Nimbus_getNimbusConf_args();
  args.read(input);
  input.readMessageEnd();
  this._handler.getNimbusConf(function (err, result) {
    var result = new Nimbus_getNimbusConf_result((err != null ? err : {success: result}));
    output.writeMessageBegin("getNimbusConf", Thrift.MessageType.REPLY, seqid);
    result.write(output);
    output.writeMessageEnd();
    output.flush();
  })
}

NimbusProcessor.prototype.process_getClusterInfo = function(seqid, input, output) {
  var args = new Nimbus_getClusterInfo_args();
  args.read(input);
  input.readMessageEnd();
  this._handler.getClusterInfo(function (err, result) {
    var result = new Nimbus_getClusterInfo_result((err != null ? err : {success: result}));
    output.writeMessageBegin("getClusterInfo", Thrift.MessageType.REPLY, seqid);
    result.write(output);
    output.writeMessageEnd();
    output.flush();
  })
}

NimbusProcessor.prototype.process_getTopologyInfo = function(seqid, input, output) {
  var args = new Nimbus_getTopologyInfo_args();
  args.read(input);
  input.readMessageEnd();
  this._handler.getTopologyInfo(args.id, function (err, result) {
    var result = new Nimbus_getTopologyInfo_result((err != null ? err : {success: result}));
    output.writeMessageBegin("getTopologyInfo", Thrift.MessageType.REPLY, seqid);
    result.write(output);
    output.writeMessageEnd();
    output.flush();
  })
}

NimbusProcessor.prototype.process_getTopologyConf = function(seqid, input, output) {
  var args = new Nimbus_getTopologyConf_args();
  args.read(input);
  input.readMessageEnd();
  this._handler.getTopologyConf(args.id, function (err, result) {
    var result = new Nimbus_getTopologyConf_result((err != null ? err : {success: result}));
    output.writeMessageBegin("getTopologyConf", Thrift.MessageType.REPLY, seqid);
    result.write(output);
    output.writeMessageEnd();
    output.flush();
  })
}

NimbusProcessor.prototype.process_getTopology = function(seqid, input, output) {
  var args = new Nimbus_getTopology_args();
  args.read(input);
  input.readMessageEnd();
  this._handler.getTopology(args.id, function (err, result) {
    var result = new Nimbus_getTopology_result((err != null ? err : {success: result}));
    output.writeMessageBegin("getTopology", Thrift.MessageType.REPLY, seqid);
    result.write(output);
    output.writeMessageEnd();
    output.flush();
  })
}

NimbusProcessor.prototype.process_getUserTopology = function(seqid, input, output) {
  var args = new Nimbus_getUserTopology_args();
  args.read(input);
  input.readMessageEnd();
  this._handler.getUserTopology(args.id, function (err, result) {
    var result = new Nimbus_getUserTopology_result((err != null ? err : {success: result}));
    output.writeMessageBegin("getUserTopology", Thrift.MessageType.REPLY, seqid);
    result.write(output);
    output.writeMessageEnd();
    output.flush();
  })
}

