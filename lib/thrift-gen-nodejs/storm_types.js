//
// Autogenerated by Thrift Compiler (0.9.1)
//
// DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
//
var Thrift = require('../thrift').Thrift;

var ttypes = module.exports = {};
ttypes.TopologyInitialStatus = {
'ACTIVE' : 1,
'INACTIVE' : 2
};
JavaObjectArg = module.exports.JavaObjectArg = function(args) {
  this.int_arg = null;
  this.long_arg = null;
  this.string_arg = null;
  this.bool_arg = null;
  this.binary_arg = null;
  this.double_arg = null;
  if (args) {
    if (args.int_arg !== undefined) {
      this.int_arg = args.int_arg;
    }
    if (args.long_arg !== undefined) {
      this.long_arg = args.long_arg;
    }
    if (args.string_arg !== undefined) {
      this.string_arg = args.string_arg;
    }
    if (args.bool_arg !== undefined) {
      this.bool_arg = args.bool_arg;
    }
    if (args.binary_arg !== undefined) {
      this.binary_arg = args.binary_arg;
    }
    if (args.double_arg !== undefined) {
      this.double_arg = args.double_arg;
    }
  }
};
JavaObjectArg.prototype = {};
JavaObjectArg.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
      if (ftype == Thrift.Type.I32) {
        this.int_arg = input.readI32();
      } else {
        input.skip(ftype);
      }
      break;
      case 2:
      if (ftype == Thrift.Type.I64) {
        this.long_arg = input.readI64();
      } else {
        input.skip(ftype);
      }
      break;
      case 3:
      if (ftype == Thrift.Type.STRING) {
        this.string_arg = input.readString();
      } else {
        input.skip(ftype);
      }
      break;
      case 4:
      if (ftype == Thrift.Type.BOOL) {
        this.bool_arg = input.readBool();
      } else {
        input.skip(ftype);
      }
      break;
      case 5:
      if (ftype == Thrift.Type.STRING) {
        this.binary_arg = input.readString();
      } else {
        input.skip(ftype);
      }
      break;
      case 6:
      if (ftype == Thrift.Type.DOUBLE) {
        this.double_arg = input.readDouble();
      } else {
        input.skip(ftype);
      }
      break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

JavaObjectArg.prototype.write = function(output) {
  output.writeStructBegin('JavaObjectArg');
  if (this.int_arg !== null && this.int_arg !== undefined) {
    output.writeFieldBegin('int_arg', Thrift.Type.I32, 1);
    output.writeI32(this.int_arg);
    output.writeFieldEnd();
  }
  if (this.long_arg !== null && this.long_arg !== undefined) {
    output.writeFieldBegin('long_arg', Thrift.Type.I64, 2);
    output.writeI64(this.long_arg);
    output.writeFieldEnd();
  }
  if (this.string_arg !== null && this.string_arg !== undefined) {
    output.writeFieldBegin('string_arg', Thrift.Type.STRING, 3);
    output.writeString(this.string_arg);
    output.writeFieldEnd();
  }
  if (this.bool_arg !== null && this.bool_arg !== undefined) {
    output.writeFieldBegin('bool_arg', Thrift.Type.BOOL, 4);
    output.writeBool(this.bool_arg);
    output.writeFieldEnd();
  }
  if (this.binary_arg !== null && this.binary_arg !== undefined) {
    output.writeFieldBegin('binary_arg', Thrift.Type.STRING, 5);
    output.writeString(this.binary_arg);
    output.writeFieldEnd();
  }
  if (this.double_arg !== null && this.double_arg !== undefined) {
    output.writeFieldBegin('double_arg', Thrift.Type.DOUBLE, 6);
    output.writeDouble(this.double_arg);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

JavaObject = module.exports.JavaObject = function(args) {
  this.full_class_name = null;
  this.args_list = null;
  if (args) {
    if (args.full_class_name !== undefined) {
      this.full_class_name = args.full_class_name;
    }
    if (args.args_list !== undefined) {
      this.args_list = args.args_list;
    }
  }
};
JavaObject.prototype = {};
JavaObject.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
      if (ftype == Thrift.Type.STRING) {
        this.full_class_name = input.readString();
      } else {
        input.skip(ftype);
      }
      break;
      case 2:
      if (ftype == Thrift.Type.LIST) {
        var _size0 = 0;
        var _rtmp34;
        this.args_list = [];
        var _etype3 = 0;
        _rtmp34 = input.readListBegin();
        _etype3 = _rtmp34.etype;
        _size0 = _rtmp34.size;
        for (var _i5 = 0; _i5 < _size0; ++_i5)
        {
          var elem6 = null;
          elem6 = new ttypes.JavaObjectArg();
          elem6.read(input);
          this.args_list.push(elem6);
        }
        input.readListEnd();
      } else {
        input.skip(ftype);
      }
      break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

JavaObject.prototype.write = function(output) {
  output.writeStructBegin('JavaObject');
  if (this.full_class_name !== null && this.full_class_name !== undefined) {
    output.writeFieldBegin('full_class_name', Thrift.Type.STRING, 1);
    output.writeString(this.full_class_name);
    output.writeFieldEnd();
  }
  if (this.args_list !== null && this.args_list !== undefined) {
    output.writeFieldBegin('args_list', Thrift.Type.LIST, 2);
    output.writeListBegin(Thrift.Type.STRUCT, this.args_list.length);
    for (var iter7 in this.args_list)
    {
      if (this.args_list.hasOwnProperty(iter7))
      {
        iter7 = this.args_list[iter7];
        iter7.write(output);
      }
    }
    output.writeListEnd();
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

NullStruct = module.exports.NullStruct = function(args) {
};
NullStruct.prototype = {};
NullStruct.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    input.skip(ftype);
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

NullStruct.prototype.write = function(output) {
  output.writeStructBegin('NullStruct');
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

GlobalStreamId = module.exports.GlobalStreamId = function(args) {
  this.componentId = null;
  this.streamId = null;
  if (args) {
    if (args.componentId !== undefined) {
      this.componentId = args.componentId;
    }
    if (args.streamId !== undefined) {
      this.streamId = args.streamId;
    }
  }
};
GlobalStreamId.prototype = {};
GlobalStreamId.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
      if (ftype == Thrift.Type.STRING) {
        this.componentId = input.readString();
      } else {
        input.skip(ftype);
      }
      break;
      case 2:
      if (ftype == Thrift.Type.STRING) {
        this.streamId = input.readString();
      } else {
        input.skip(ftype);
      }
      break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

GlobalStreamId.prototype.write = function(output) {
  output.writeStructBegin('GlobalStreamId');
  if (this.componentId !== null && this.componentId !== undefined) {
    output.writeFieldBegin('componentId', Thrift.Type.STRING, 1);
    output.writeString(this.componentId);
    output.writeFieldEnd();
  }
  if (this.streamId !== null && this.streamId !== undefined) {
    output.writeFieldBegin('streamId', Thrift.Type.STRING, 2);
    output.writeString(this.streamId);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

Grouping = module.exports.Grouping = function(args) {
  this.fields = null;
  this.shuffle = null;
  this.all = null;
  this.none = null;
  this.direct = null;
  this.custom_object = null;
  this.custom_serialized = null;
  this.local_or_shuffle = null;
  if (args) {
    if (args.fields !== undefined) {
      this.fields = args.fields;
    }
    if (args.shuffle !== undefined) {
      this.shuffle = args.shuffle;
    }
    if (args.all !== undefined) {
      this.all = args.all;
    }
    if (args.none !== undefined) {
      this.none = args.none;
    }
    if (args.direct !== undefined) {
      this.direct = args.direct;
    }
    if (args.custom_object !== undefined) {
      this.custom_object = args.custom_object;
    }
    if (args.custom_serialized !== undefined) {
      this.custom_serialized = args.custom_serialized;
    }
    if (args.local_or_shuffle !== undefined) {
      this.local_or_shuffle = args.local_or_shuffle;
    }
  }
};
Grouping.prototype = {};
Grouping.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
      if (ftype == Thrift.Type.LIST) {
        var _size8 = 0;
        var _rtmp312;
        this.fields = [];
        var _etype11 = 0;
        _rtmp312 = input.readListBegin();
        _etype11 = _rtmp312.etype;
        _size8 = _rtmp312.size;
        for (var _i13 = 0; _i13 < _size8; ++_i13)
        {
          var elem14 = null;
          elem14 = input.readString();
          this.fields.push(elem14);
        }
        input.readListEnd();
      } else {
        input.skip(ftype);
      }
      break;
      case 2:
      if (ftype == Thrift.Type.STRUCT) {
        this.shuffle = new ttypes.NullStruct();
        this.shuffle.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      case 3:
      if (ftype == Thrift.Type.STRUCT) {
        this.all = new ttypes.NullStruct();
        this.all.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      case 4:
      if (ftype == Thrift.Type.STRUCT) {
        this.none = new ttypes.NullStruct();
        this.none.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      case 5:
      if (ftype == Thrift.Type.STRUCT) {
        this.direct = new ttypes.NullStruct();
        this.direct.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      case 6:
      if (ftype == Thrift.Type.STRUCT) {
        this.custom_object = new ttypes.JavaObject();
        this.custom_object.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      case 7:
      if (ftype == Thrift.Type.STRING) {
        this.custom_serialized = input.readString();
      } else {
        input.skip(ftype);
      }
      break;
      case 8:
      if (ftype == Thrift.Type.STRUCT) {
        this.local_or_shuffle = new ttypes.NullStruct();
        this.local_or_shuffle.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

Grouping.prototype.write = function(output) {
  output.writeStructBegin('Grouping');
  if (this.fields !== null && this.fields !== undefined) {
    output.writeFieldBegin('fields', Thrift.Type.LIST, 1);
    output.writeListBegin(Thrift.Type.STRING, this.fields.length);
    for (var iter15 in this.fields)
    {
      if (this.fields.hasOwnProperty(iter15))
      {
        iter15 = this.fields[iter15];
        output.writeString(iter15);
      }
    }
    output.writeListEnd();
    output.writeFieldEnd();
  }
  if (this.shuffle !== null && this.shuffle !== undefined) {
    output.writeFieldBegin('shuffle', Thrift.Type.STRUCT, 2);
    this.shuffle.write(output);
    output.writeFieldEnd();
  }
  if (this.all !== null && this.all !== undefined) {
    output.writeFieldBegin('all', Thrift.Type.STRUCT, 3);
    this.all.write(output);
    output.writeFieldEnd();
  }
  if (this.none !== null && this.none !== undefined) {
    output.writeFieldBegin('none', Thrift.Type.STRUCT, 4);
    this.none.write(output);
    output.writeFieldEnd();
  }
  if (this.direct !== null && this.direct !== undefined) {
    output.writeFieldBegin('direct', Thrift.Type.STRUCT, 5);
    this.direct.write(output);
    output.writeFieldEnd();
  }
  if (this.custom_object !== null && this.custom_object !== undefined) {
    output.writeFieldBegin('custom_object', Thrift.Type.STRUCT, 6);
    this.custom_object.write(output);
    output.writeFieldEnd();
  }
  if (this.custom_serialized !== null && this.custom_serialized !== undefined) {
    output.writeFieldBegin('custom_serialized', Thrift.Type.STRING, 7);
    output.writeString(this.custom_serialized);
    output.writeFieldEnd();
  }
  if (this.local_or_shuffle !== null && this.local_or_shuffle !== undefined) {
    output.writeFieldBegin('local_or_shuffle', Thrift.Type.STRUCT, 8);
    this.local_or_shuffle.write(output);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

StreamInfo = module.exports.StreamInfo = function(args) {
  this.output_fields = null;
  this.direct = null;
  if (args) {
    if (args.output_fields !== undefined) {
      this.output_fields = args.output_fields;
    }
    if (args.direct !== undefined) {
      this.direct = args.direct;
    }
  }
};
StreamInfo.prototype = {};
StreamInfo.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
      if (ftype == Thrift.Type.LIST) {
        var _size16 = 0;
        var _rtmp320;
        this.output_fields = [];
        var _etype19 = 0;
        _rtmp320 = input.readListBegin();
        _etype19 = _rtmp320.etype;
        _size16 = _rtmp320.size;
        for (var _i21 = 0; _i21 < _size16; ++_i21)
        {
          var elem22 = null;
          elem22 = input.readString();
          this.output_fields.push(elem22);
        }
        input.readListEnd();
      } else {
        input.skip(ftype);
      }
      break;
      case 2:
      if (ftype == Thrift.Type.BOOL) {
        this.direct = input.readBool();
      } else {
        input.skip(ftype);
      }
      break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

StreamInfo.prototype.write = function(output) {
  output.writeStructBegin('StreamInfo');
  if (this.output_fields !== null && this.output_fields !== undefined) {
    output.writeFieldBegin('output_fields', Thrift.Type.LIST, 1);
    output.writeListBegin(Thrift.Type.STRING, this.output_fields.length);
    for (var iter23 in this.output_fields)
    {
      if (this.output_fields.hasOwnProperty(iter23))
      {
        iter23 = this.output_fields[iter23];
        output.writeString(iter23);
      }
    }
    output.writeListEnd();
    output.writeFieldEnd();
  }
  if (this.direct !== null && this.direct !== undefined) {
    output.writeFieldBegin('direct', Thrift.Type.BOOL, 2);
    output.writeBool(this.direct);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

ShellComponent = module.exports.ShellComponent = function(args) {
  this.execution_command = null;
  this.script = null;
  if (args) {
    if (args.execution_command !== undefined) {
      this.execution_command = args.execution_command;
    }
    if (args.script !== undefined) {
      this.script = args.script;
    }
  }
};
ShellComponent.prototype = {};
ShellComponent.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
      if (ftype == Thrift.Type.STRING) {
        this.execution_command = input.readString();
      } else {
        input.skip(ftype);
      }
      break;
      case 2:
      if (ftype == Thrift.Type.STRING) {
        this.script = input.readString();
      } else {
        input.skip(ftype);
      }
      break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

ShellComponent.prototype.write = function(output) {
  output.writeStructBegin('ShellComponent');
  if (this.execution_command !== null && this.execution_command !== undefined) {
    output.writeFieldBegin('execution_command', Thrift.Type.STRING, 1);
    output.writeString(this.execution_command);
    output.writeFieldEnd();
  }
  if (this.script !== null && this.script !== undefined) {
    output.writeFieldBegin('script', Thrift.Type.STRING, 2);
    output.writeString(this.script);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

ComponentObject = module.exports.ComponentObject = function(args) {
  this.serialized_java = null;
  this.shell = null;
  this.java_object = null;
  if (args) {
    if (args.serialized_java !== undefined) {
      this.serialized_java = args.serialized_java;
    }
    if (args.shell !== undefined) {
      this.shell = args.shell;
    }
    if (args.java_object !== undefined) {
      this.java_object = args.java_object;
    }
  }
};
ComponentObject.prototype = {};
ComponentObject.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
      if (ftype == Thrift.Type.STRING) {
        this.serialized_java = input.readString();
      } else {
        input.skip(ftype);
      }
      break;
      case 2:
      if (ftype == Thrift.Type.STRUCT) {
        this.shell = new ttypes.ShellComponent();
        this.shell.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      case 3:
      if (ftype == Thrift.Type.STRUCT) {
        this.java_object = new ttypes.JavaObject();
        this.java_object.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

ComponentObject.prototype.write = function(output) {
  output.writeStructBegin('ComponentObject');
  if (this.serialized_java !== null && this.serialized_java !== undefined) {
    output.writeFieldBegin('serialized_java', Thrift.Type.STRING, 1);
    output.writeString(this.serialized_java);
    output.writeFieldEnd();
  }
  if (this.shell !== null && this.shell !== undefined) {
    output.writeFieldBegin('shell', Thrift.Type.STRUCT, 2);
    this.shell.write(output);
    output.writeFieldEnd();
  }
  if (this.java_object !== null && this.java_object !== undefined) {
    output.writeFieldBegin('java_object', Thrift.Type.STRUCT, 3);
    this.java_object.write(output);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

ComponentCommon = module.exports.ComponentCommon = function(args) {
  this.inputs = null;
  this.streams = null;
  this.parallelism_hint = null;
  this.json_conf = null;
  if (args) {
    if (args.inputs !== undefined) {
      this.inputs = args.inputs;
    }
    if (args.streams !== undefined) {
      this.streams = args.streams;
    }
    if (args.parallelism_hint !== undefined) {
      this.parallelism_hint = args.parallelism_hint;
    }
    if (args.json_conf !== undefined) {
      this.json_conf = args.json_conf;
    }
  }
};
ComponentCommon.prototype = {};
ComponentCommon.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
      if (ftype == Thrift.Type.MAP) {
        var _size24 = 0;
        var _rtmp328;
        this.inputs = {};
        var _ktype25 = 0;
        var _vtype26 = 0;
        _rtmp328 = input.readMapBegin();
        _ktype25 = _rtmp328.ktype;
        _vtype26 = _rtmp328.vtype;
        _size24 = _rtmp328.size;
        for (var _i29 = 0; _i29 < _size24; ++_i29)
        {
          var key30 = null;
          var val31 = null;
          key30 = new ttypes.GlobalStreamId();
          key30.read(input);
          val31 = new ttypes.Grouping();
          val31.read(input);
          this.inputs[key30] = val31;
        }
        input.readMapEnd();
      } else {
        input.skip(ftype);
      }
      break;
      case 2:
      if (ftype == Thrift.Type.MAP) {
        var _size32 = 0;
        var _rtmp336;
        this.streams = {};
        var _ktype33 = 0;
        var _vtype34 = 0;
        _rtmp336 = input.readMapBegin();
        _ktype33 = _rtmp336.ktype;
        _vtype34 = _rtmp336.vtype;
        _size32 = _rtmp336.size;
        for (var _i37 = 0; _i37 < _size32; ++_i37)
        {
          var key38 = null;
          var val39 = null;
          key38 = input.readString();
          val39 = new ttypes.StreamInfo();
          val39.read(input);
          this.streams[key38] = val39;
        }
        input.readMapEnd();
      } else {
        input.skip(ftype);
      }
      break;
      case 3:
      if (ftype == Thrift.Type.I32) {
        this.parallelism_hint = input.readI32();
      } else {
        input.skip(ftype);
      }
      break;
      case 4:
      if (ftype == Thrift.Type.STRING) {
        this.json_conf = input.readString();
      } else {
        input.skip(ftype);
      }
      break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

ComponentCommon.prototype.write = function(output) {
  output.writeStructBegin('ComponentCommon');
  if (this.inputs !== null && this.inputs !== undefined) {
    output.writeFieldBegin('inputs', Thrift.Type.MAP, 1);
    output.writeMapBegin(Thrift.Type.STRUCT, Thrift.Type.STRUCT, Thrift.objectLength(this.inputs));
    for (var kiter40 in this.inputs)
    {
      if (this.inputs.hasOwnProperty(kiter40))
      {
        var viter41 = this.inputs[kiter40];
        kiter40.write(output);
        viter41.write(output);
      }
    }
    output.writeMapEnd();
    output.writeFieldEnd();
  }
  if (this.streams !== null && this.streams !== undefined) {
    output.writeFieldBegin('streams', Thrift.Type.MAP, 2);
    output.writeMapBegin(Thrift.Type.STRING, Thrift.Type.STRUCT, Thrift.objectLength(this.streams));
    for (var kiter42 in this.streams)
    {
      if (this.streams.hasOwnProperty(kiter42))
      {
        var viter43 = this.streams[kiter42];
        output.writeString(kiter42);
        viter43.write(output);
      }
    }
    output.writeMapEnd();
    output.writeFieldEnd();
  }
  if (this.parallelism_hint !== null && this.parallelism_hint !== undefined) {
    output.writeFieldBegin('parallelism_hint', Thrift.Type.I32, 3);
    output.writeI32(this.parallelism_hint);
    output.writeFieldEnd();
  }
  if (this.json_conf !== null && this.json_conf !== undefined) {
    output.writeFieldBegin('json_conf', Thrift.Type.STRING, 4);
    output.writeString(this.json_conf);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

SpoutSpec = module.exports.SpoutSpec = function(args) {
  this.spout_object = null;
  this.common = null;
  if (args) {
    if (args.spout_object !== undefined) {
      this.spout_object = args.spout_object;
    }
    if (args.common !== undefined) {
      this.common = args.common;
    }
  }
};
SpoutSpec.prototype = {};
SpoutSpec.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
      if (ftype == Thrift.Type.STRUCT) {
        this.spout_object = new ttypes.ComponentObject();
        this.spout_object.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      case 2:
      if (ftype == Thrift.Type.STRUCT) {
        this.common = new ttypes.ComponentCommon();
        this.common.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

SpoutSpec.prototype.write = function(output) {
  output.writeStructBegin('SpoutSpec');
  if (this.spout_object !== null && this.spout_object !== undefined) {
    output.writeFieldBegin('spout_object', Thrift.Type.STRUCT, 1);
    this.spout_object.write(output);
    output.writeFieldEnd();
  }
  if (this.common !== null && this.common !== undefined) {
    output.writeFieldBegin('common', Thrift.Type.STRUCT, 2);
    this.common.write(output);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

Bolt = module.exports.Bolt = function(args) {
  this.bolt_object = null;
  this.common = null;
  if (args) {
    if (args.bolt_object !== undefined) {
      this.bolt_object = args.bolt_object;
    }
    if (args.common !== undefined) {
      this.common = args.common;
    }
  }
};
Bolt.prototype = {};
Bolt.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
      if (ftype == Thrift.Type.STRUCT) {
        this.bolt_object = new ttypes.ComponentObject();
        this.bolt_object.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      case 2:
      if (ftype == Thrift.Type.STRUCT) {
        this.common = new ttypes.ComponentCommon();
        this.common.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

Bolt.prototype.write = function(output) {
  output.writeStructBegin('Bolt');
  if (this.bolt_object !== null && this.bolt_object !== undefined) {
    output.writeFieldBegin('bolt_object', Thrift.Type.STRUCT, 1);
    this.bolt_object.write(output);
    output.writeFieldEnd();
  }
  if (this.common !== null && this.common !== undefined) {
    output.writeFieldBegin('common', Thrift.Type.STRUCT, 2);
    this.common.write(output);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

StateSpoutSpec = module.exports.StateSpoutSpec = function(args) {
  this.state_spout_object = null;
  this.common = null;
  if (args) {
    if (args.state_spout_object !== undefined) {
      this.state_spout_object = args.state_spout_object;
    }
    if (args.common !== undefined) {
      this.common = args.common;
    }
  }
};
StateSpoutSpec.prototype = {};
StateSpoutSpec.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
      if (ftype == Thrift.Type.STRUCT) {
        this.state_spout_object = new ttypes.ComponentObject();
        this.state_spout_object.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      case 2:
      if (ftype == Thrift.Type.STRUCT) {
        this.common = new ttypes.ComponentCommon();
        this.common.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

StateSpoutSpec.prototype.write = function(output) {
  output.writeStructBegin('StateSpoutSpec');
  if (this.state_spout_object !== null && this.state_spout_object !== undefined) {
    output.writeFieldBegin('state_spout_object', Thrift.Type.STRUCT, 1);
    this.state_spout_object.write(output);
    output.writeFieldEnd();
  }
  if (this.common !== null && this.common !== undefined) {
    output.writeFieldBegin('common', Thrift.Type.STRUCT, 2);
    this.common.write(output);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

StormTopology = module.exports.StormTopology = function(args) {
  this.spouts = null;
  this.bolts = null;
  this.state_spouts = null;
  if (args) {
    if (args.spouts !== undefined) {
      this.spouts = args.spouts;
    }
    if (args.bolts !== undefined) {
      this.bolts = args.bolts;
    }
    if (args.state_spouts !== undefined) {
      this.state_spouts = args.state_spouts;
    }
  }
};
StormTopology.prototype = {};
StormTopology.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
      if (ftype == Thrift.Type.MAP) {
        var _size44 = 0;
        var _rtmp348;
        this.spouts = {};
        var _ktype45 = 0;
        var _vtype46 = 0;
        _rtmp348 = input.readMapBegin();
        _ktype45 = _rtmp348.ktype;
        _vtype46 = _rtmp348.vtype;
        _size44 = _rtmp348.size;
        for (var _i49 = 0; _i49 < _size44; ++_i49)
        {
          var key50 = null;
          var val51 = null;
          key50 = input.readString();
          val51 = new ttypes.SpoutSpec();
          val51.read(input);
          this.spouts[key50] = val51;
        }
        input.readMapEnd();
      } else {
        input.skip(ftype);
      }
      break;
      case 2:
      if (ftype == Thrift.Type.MAP) {
        var _size52 = 0;
        var _rtmp356;
        this.bolts = {};
        var _ktype53 = 0;
        var _vtype54 = 0;
        _rtmp356 = input.readMapBegin();
        _ktype53 = _rtmp356.ktype;
        _vtype54 = _rtmp356.vtype;
        _size52 = _rtmp356.size;
        for (var _i57 = 0; _i57 < _size52; ++_i57)
        {
          var key58 = null;
          var val59 = null;
          key58 = input.readString();
          val59 = new ttypes.Bolt();
          val59.read(input);
          this.bolts[key58] = val59;
        }
        input.readMapEnd();
      } else {
        input.skip(ftype);
      }
      break;
      case 3:
      if (ftype == Thrift.Type.MAP) {
        var _size60 = 0;
        var _rtmp364;
        this.state_spouts = {};
        var _ktype61 = 0;
        var _vtype62 = 0;
        _rtmp364 = input.readMapBegin();
        _ktype61 = _rtmp364.ktype;
        _vtype62 = _rtmp364.vtype;
        _size60 = _rtmp364.size;
        for (var _i65 = 0; _i65 < _size60; ++_i65)
        {
          var key66 = null;
          var val67 = null;
          key66 = input.readString();
          val67 = new ttypes.StateSpoutSpec();
          val67.read(input);
          this.state_spouts[key66] = val67;
        }
        input.readMapEnd();
      } else {
        input.skip(ftype);
      }
      break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

StormTopology.prototype.write = function(output) {
  output.writeStructBegin('StormTopology');
  if (this.spouts !== null && this.spouts !== undefined) {
    output.writeFieldBegin('spouts', Thrift.Type.MAP, 1);
    output.writeMapBegin(Thrift.Type.STRING, Thrift.Type.STRUCT, Thrift.objectLength(this.spouts));
    for (var kiter68 in this.spouts)
    {
      if (this.spouts.hasOwnProperty(kiter68))
      {
        var viter69 = this.spouts[kiter68];
        output.writeString(kiter68);
        viter69.write(output);
      }
    }
    output.writeMapEnd();
    output.writeFieldEnd();
  }
  if (this.bolts !== null && this.bolts !== undefined) {
    output.writeFieldBegin('bolts', Thrift.Type.MAP, 2);
    output.writeMapBegin(Thrift.Type.STRING, Thrift.Type.STRUCT, Thrift.objectLength(this.bolts));
    for (var kiter70 in this.bolts)
    {
      if (this.bolts.hasOwnProperty(kiter70))
      {
        var viter71 = this.bolts[kiter70];
        output.writeString(kiter70);
        viter71.write(output);
      }
    }
    output.writeMapEnd();
    output.writeFieldEnd();
  }
  if (this.state_spouts !== null && this.state_spouts !== undefined) {
    output.writeFieldBegin('state_spouts', Thrift.Type.MAP, 3);
    output.writeMapBegin(Thrift.Type.STRING, Thrift.Type.STRUCT, Thrift.objectLength(this.state_spouts));
    for (var kiter72 in this.state_spouts)
    {
      if (this.state_spouts.hasOwnProperty(kiter72))
      {
        var viter73 = this.state_spouts[kiter72];
        output.writeString(kiter72);
        viter73.write(output);
      }
    }
    output.writeMapEnd();
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

AlreadyAliveException = module.exports.AlreadyAliveException = function(args) {
  Thrift.TException.call(this, "AlreadyAliveException")
  this.name = "AlreadyAliveException"
  this.msg = null;
  if (args) {
    if (args.msg !== undefined) {
      this.msg = args.msg;
    }
  }
};
Thrift.inherits(AlreadyAliveException, Thrift.TException);
AlreadyAliveException.prototype.name = 'AlreadyAliveException';
AlreadyAliveException.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
      if (ftype == Thrift.Type.STRING) {
        this.msg = input.readString();
      } else {
        input.skip(ftype);
      }
      break;
      case 0:
        input.skip(ftype);
        break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

AlreadyAliveException.prototype.write = function(output) {
  output.writeStructBegin('AlreadyAliveException');
  if (this.msg !== null && this.msg !== undefined) {
    output.writeFieldBegin('msg', Thrift.Type.STRING, 1);
    output.writeString(this.msg);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

NotAliveException = module.exports.NotAliveException = function(args) {
  Thrift.TException.call(this, "NotAliveException")
  this.name = "NotAliveException"
  this.msg = null;
  if (args) {
    if (args.msg !== undefined) {
      this.msg = args.msg;
    }
  }
};
Thrift.inherits(NotAliveException, Thrift.TException);
NotAliveException.prototype.name = 'NotAliveException';
NotAliveException.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
      if (ftype == Thrift.Type.STRING) {
        this.msg = input.readString();
      } else {
        input.skip(ftype);
      }
      break;
      case 0:
        input.skip(ftype);
        break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

NotAliveException.prototype.write = function(output) {
  output.writeStructBegin('NotAliveException');
  if (this.msg !== null && this.msg !== undefined) {
    output.writeFieldBegin('msg', Thrift.Type.STRING, 1);
    output.writeString(this.msg);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

InvalidTopologyException = module.exports.InvalidTopologyException = function(args) {
  Thrift.TException.call(this, "InvalidTopologyException")
  this.name = "InvalidTopologyException"
  this.msg = null;
  if (args) {
    if (args.msg !== undefined) {
      this.msg = args.msg;
    }
  }
};
Thrift.inherits(InvalidTopologyException, Thrift.TException);
InvalidTopologyException.prototype.name = 'InvalidTopologyException';
InvalidTopologyException.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
      if (ftype == Thrift.Type.STRING) {
        this.msg = input.readString();
      } else {
        input.skip(ftype);
      }
      break;
      case 0:
        input.skip(ftype);
        break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

InvalidTopologyException.prototype.write = function(output) {
  output.writeStructBegin('InvalidTopologyException');
  if (this.msg !== null && this.msg !== undefined) {
    output.writeFieldBegin('msg', Thrift.Type.STRING, 1);
    output.writeString(this.msg);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

TopologySummary = module.exports.TopologySummary = function(args) {
  this.id = null;
  this.name = null;
  this.num_tasks = null;
  this.num_executors = null;
  this.num_workers = null;
  this.uptime_secs = null;
  this.status = null;
  if (args) {
    if (args.id !== undefined) {
      this.id = args.id;
    }
    if (args.name !== undefined) {
      this.name = args.name;
    }
    if (args.num_tasks !== undefined) {
      this.num_tasks = args.num_tasks;
    }
    if (args.num_executors !== undefined) {
      this.num_executors = args.num_executors;
    }
    if (args.num_workers !== undefined) {
      this.num_workers = args.num_workers;
    }
    if (args.uptime_secs !== undefined) {
      this.uptime_secs = args.uptime_secs;
    }
    if (args.status !== undefined) {
      this.status = args.status;
    }
  }
};
TopologySummary.prototype = {};
TopologySummary.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
      if (ftype == Thrift.Type.STRING) {
        this.id = input.readString();
      } else {
        input.skip(ftype);
      }
      break;
      case 2:
      if (ftype == Thrift.Type.STRING) {
        this.name = input.readString();
      } else {
        input.skip(ftype);
      }
      break;
      case 3:
      if (ftype == Thrift.Type.I32) {
        this.num_tasks = input.readI32();
      } else {
        input.skip(ftype);
      }
      break;
      case 4:
      if (ftype == Thrift.Type.I32) {
        this.num_executors = input.readI32();
      } else {
        input.skip(ftype);
      }
      break;
      case 5:
      if (ftype == Thrift.Type.I32) {
        this.num_workers = input.readI32();
      } else {
        input.skip(ftype);
      }
      break;
      case 6:
      if (ftype == Thrift.Type.I32) {
        this.uptime_secs = input.readI32();
      } else {
        input.skip(ftype);
      }
      break;
      case 7:
      if (ftype == Thrift.Type.STRING) {
        this.status = input.readString();
      } else {
        input.skip(ftype);
      }
      break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

TopologySummary.prototype.write = function(output) {
  output.writeStructBegin('TopologySummary');
  if (this.id !== null && this.id !== undefined) {
    output.writeFieldBegin('id', Thrift.Type.STRING, 1);
    output.writeString(this.id);
    output.writeFieldEnd();
  }
  if (this.name !== null && this.name !== undefined) {
    output.writeFieldBegin('name', Thrift.Type.STRING, 2);
    output.writeString(this.name);
    output.writeFieldEnd();
  }
  if (this.num_tasks !== null && this.num_tasks !== undefined) {
    output.writeFieldBegin('num_tasks', Thrift.Type.I32, 3);
    output.writeI32(this.num_tasks);
    output.writeFieldEnd();
  }
  if (this.num_executors !== null && this.num_executors !== undefined) {
    output.writeFieldBegin('num_executors', Thrift.Type.I32, 4);
    output.writeI32(this.num_executors);
    output.writeFieldEnd();
  }
  if (this.num_workers !== null && this.num_workers !== undefined) {
    output.writeFieldBegin('num_workers', Thrift.Type.I32, 5);
    output.writeI32(this.num_workers);
    output.writeFieldEnd();
  }
  if (this.uptime_secs !== null && this.uptime_secs !== undefined) {
    output.writeFieldBegin('uptime_secs', Thrift.Type.I32, 6);
    output.writeI32(this.uptime_secs);
    output.writeFieldEnd();
  }
  if (this.status !== null && this.status !== undefined) {
    output.writeFieldBegin('status', Thrift.Type.STRING, 7);
    output.writeString(this.status);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

SupervisorSummary = module.exports.SupervisorSummary = function(args) {
  this.host = null;
  this.uptime_secs = null;
  this.num_workers = null;
  this.num_used_workers = null;
  this.supervisor_id = null;
  if (args) {
    if (args.host !== undefined) {
      this.host = args.host;
    }
    if (args.uptime_secs !== undefined) {
      this.uptime_secs = args.uptime_secs;
    }
    if (args.num_workers !== undefined) {
      this.num_workers = args.num_workers;
    }
    if (args.num_used_workers !== undefined) {
      this.num_used_workers = args.num_used_workers;
    }
    if (args.supervisor_id !== undefined) {
      this.supervisor_id = args.supervisor_id;
    }
  }
};
SupervisorSummary.prototype = {};
SupervisorSummary.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
      if (ftype == Thrift.Type.STRING) {
        this.host = input.readString();
      } else {
        input.skip(ftype);
      }
      break;
      case 2:
      if (ftype == Thrift.Type.I32) {
        this.uptime_secs = input.readI32();
      } else {
        input.skip(ftype);
      }
      break;
      case 3:
      if (ftype == Thrift.Type.I32) {
        this.num_workers = input.readI32();
      } else {
        input.skip(ftype);
      }
      break;
      case 4:
      if (ftype == Thrift.Type.I32) {
        this.num_used_workers = input.readI32();
      } else {
        input.skip(ftype);
      }
      break;
      case 5:
      if (ftype == Thrift.Type.STRING) {
        this.supervisor_id = input.readString();
      } else {
        input.skip(ftype);
      }
      break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

SupervisorSummary.prototype.write = function(output) {
  output.writeStructBegin('SupervisorSummary');
  if (this.host !== null && this.host !== undefined) {
    output.writeFieldBegin('host', Thrift.Type.STRING, 1);
    output.writeString(this.host);
    output.writeFieldEnd();
  }
  if (this.uptime_secs !== null && this.uptime_secs !== undefined) {
    output.writeFieldBegin('uptime_secs', Thrift.Type.I32, 2);
    output.writeI32(this.uptime_secs);
    output.writeFieldEnd();
  }
  if (this.num_workers !== null && this.num_workers !== undefined) {
    output.writeFieldBegin('num_workers', Thrift.Type.I32, 3);
    output.writeI32(this.num_workers);
    output.writeFieldEnd();
  }
  if (this.num_used_workers !== null && this.num_used_workers !== undefined) {
    output.writeFieldBegin('num_used_workers', Thrift.Type.I32, 4);
    output.writeI32(this.num_used_workers);
    output.writeFieldEnd();
  }
  if (this.supervisor_id !== null && this.supervisor_id !== undefined) {
    output.writeFieldBegin('supervisor_id', Thrift.Type.STRING, 5);
    output.writeString(this.supervisor_id);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

ClusterSummary = module.exports.ClusterSummary = function(args) {
  this.supervisors = null;
  this.nimbus_uptime_secs = null;
  this.topologies = null;
  if (args) {
    if (args.supervisors !== undefined) {
      this.supervisors = args.supervisors;
    }
    if (args.nimbus_uptime_secs !== undefined) {
      this.nimbus_uptime_secs = args.nimbus_uptime_secs;
    }
    if (args.topologies !== undefined) {
      this.topologies = args.topologies;
    }
  }
};
ClusterSummary.prototype = {};
ClusterSummary.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
      if (ftype == Thrift.Type.LIST) {
        var _size74 = 0;
        var _rtmp378;
        this.supervisors = [];
        var _etype77 = 0;
        _rtmp378 = input.readListBegin();
        _etype77 = _rtmp378.etype;
        _size74 = _rtmp378.size;
        for (var _i79 = 0; _i79 < _size74; ++_i79)
        {
          var elem80 = null;
          elem80 = new ttypes.SupervisorSummary();
          elem80.read(input);
          this.supervisors.push(elem80);
        }
        input.readListEnd();
      } else {
        input.skip(ftype);
      }
      break;
      case 2:
      if (ftype == Thrift.Type.I32) {
        this.nimbus_uptime_secs = input.readI32();
      } else {
        input.skip(ftype);
      }
      break;
      case 3:
      if (ftype == Thrift.Type.LIST) {
        var _size81 = 0;
        var _rtmp385;
        this.topologies = [];
        var _etype84 = 0;
        _rtmp385 = input.readListBegin();
        _etype84 = _rtmp385.etype;
        _size81 = _rtmp385.size;
        for (var _i86 = 0; _i86 < _size81; ++_i86)
        {
          var elem87 = null;
          elem87 = new ttypes.TopologySummary();
          elem87.read(input);
          this.topologies.push(elem87);
        }
        input.readListEnd();
      } else {
        input.skip(ftype);
      }
      break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

ClusterSummary.prototype.write = function(output) {
  output.writeStructBegin('ClusterSummary');
  if (this.supervisors !== null && this.supervisors !== undefined) {
    output.writeFieldBegin('supervisors', Thrift.Type.LIST, 1);
    output.writeListBegin(Thrift.Type.STRUCT, this.supervisors.length);
    for (var iter88 in this.supervisors)
    {
      if (this.supervisors.hasOwnProperty(iter88))
      {
        iter88 = this.supervisors[iter88];
        iter88.write(output);
      }
    }
    output.writeListEnd();
    output.writeFieldEnd();
  }
  if (this.nimbus_uptime_secs !== null && this.nimbus_uptime_secs !== undefined) {
    output.writeFieldBegin('nimbus_uptime_secs', Thrift.Type.I32, 2);
    output.writeI32(this.nimbus_uptime_secs);
    output.writeFieldEnd();
  }
  if (this.topologies !== null && this.topologies !== undefined) {
    output.writeFieldBegin('topologies', Thrift.Type.LIST, 3);
    output.writeListBegin(Thrift.Type.STRUCT, this.topologies.length);
    for (var iter89 in this.topologies)
    {
      if (this.topologies.hasOwnProperty(iter89))
      {
        iter89 = this.topologies[iter89];
        iter89.write(output);
      }
    }
    output.writeListEnd();
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

ErrorInfo = module.exports.ErrorInfo = function(args) {
  this.error = null;
  this.error_time_secs = null;
  this.host = null;
  this.port = null;
  if (args) {
    if (args.error !== undefined) {
      this.error = args.error;
    }
    if (args.error_time_secs !== undefined) {
      this.error_time_secs = args.error_time_secs;
    }
    if (args.host !== undefined) {
      this.host = args.host;
    }
    if (args.port !== undefined) {
      this.port = args.port;
    }
  }
};
ErrorInfo.prototype = {};
ErrorInfo.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
      if (ftype == Thrift.Type.STRING) {
        this.error = input.readString();
      } else {
        input.skip(ftype);
      }
      break;
      case 2:
      if (ftype == Thrift.Type.I32) {
        this.error_time_secs = input.readI32();
      } else {
        input.skip(ftype);
      }
      break;
      case 3:
      if (ftype == Thrift.Type.STRING) {
        this.host = input.readString();
      } else {
        input.skip(ftype);
      }
      break;
      case 4:
      if (ftype == Thrift.Type.I32) {
        this.port = input.readI32();
      } else {
        input.skip(ftype);
      }
      break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

ErrorInfo.prototype.write = function(output) {
  output.writeStructBegin('ErrorInfo');
  if (this.error !== null && this.error !== undefined) {
    output.writeFieldBegin('error', Thrift.Type.STRING, 1);
    output.writeString(this.error);
    output.writeFieldEnd();
  }
  if (this.error_time_secs !== null && this.error_time_secs !== undefined) {
    output.writeFieldBegin('error_time_secs', Thrift.Type.I32, 2);
    output.writeI32(this.error_time_secs);
    output.writeFieldEnd();
  }
  if (this.host !== null && this.host !== undefined) {
    output.writeFieldBegin('host', Thrift.Type.STRING, 3);
    output.writeString(this.host);
    output.writeFieldEnd();
  }
  if (this.port !== null && this.port !== undefined) {
    output.writeFieldBegin('port', Thrift.Type.I32, 4);
    output.writeI32(this.port);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

BoltStats = module.exports.BoltStats = function(args) {
  this.acked = null;
  this.failed = null;
  this.process_ms_avg = null;
  this.executed = null;
  this.execute_ms_avg = null;
  if (args) {
    if (args.acked !== undefined) {
      this.acked = args.acked;
    }
    if (args.failed !== undefined) {
      this.failed = args.failed;
    }
    if (args.process_ms_avg !== undefined) {
      this.process_ms_avg = args.process_ms_avg;
    }
    if (args.executed !== undefined) {
      this.executed = args.executed;
    }
    if (args.execute_ms_avg !== undefined) {
      this.execute_ms_avg = args.execute_ms_avg;
    }
  }
};
BoltStats.prototype = {};
BoltStats.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
      if (ftype == Thrift.Type.MAP) {
        var _size90 = 0;
        var _rtmp394;
        this.acked = {};
        var _ktype91 = 0;
        var _vtype92 = 0;
        _rtmp394 = input.readMapBegin();
        _ktype91 = _rtmp394.ktype;
        _vtype92 = _rtmp394.vtype;
        _size90 = _rtmp394.size;
        for (var _i95 = 0; _i95 < _size90; ++_i95)
        {
          var key96 = null;
          var val97 = null;
          key96 = input.readString();
          var _size98 = 0;
          var _rtmp3102;
          val97 = {};
          var _ktype99 = 0;
          var _vtype100 = 0;
          _rtmp3102 = input.readMapBegin();
          _ktype99 = _rtmp3102.ktype;
          _vtype100 = _rtmp3102.vtype;
          _size98 = _rtmp3102.size;
          for (var _i103 = 0; _i103 < _size98; ++_i103)
          {
            var key104 = null;
            var val105 = null;
            key104 = new ttypes.GlobalStreamId();
            key104.read(input);
            val105 = input.readI64();
            val97[key104] = val105;
          }
          input.readMapEnd();
          this.acked[key96] = val97;
        }
        input.readMapEnd();
      } else {
        input.skip(ftype);
      }
      break;
      case 2:
      if (ftype == Thrift.Type.MAP) {
        var _size106 = 0;
        var _rtmp3110;
        this.failed = {};
        var _ktype107 = 0;
        var _vtype108 = 0;
        _rtmp3110 = input.readMapBegin();
        _ktype107 = _rtmp3110.ktype;
        _vtype108 = _rtmp3110.vtype;
        _size106 = _rtmp3110.size;
        for (var _i111 = 0; _i111 < _size106; ++_i111)
        {
          var key112 = null;
          var val113 = null;
          key112 = input.readString();
          var _size114 = 0;
          var _rtmp3118;
          val113 = {};
          var _ktype115 = 0;
          var _vtype116 = 0;
          _rtmp3118 = input.readMapBegin();
          _ktype115 = _rtmp3118.ktype;
          _vtype116 = _rtmp3118.vtype;
          _size114 = _rtmp3118.size;
          for (var _i119 = 0; _i119 < _size114; ++_i119)
          {
            var key120 = null;
            var val121 = null;
            key120 = new ttypes.GlobalStreamId();
            key120.read(input);
            val121 = input.readI64();
            val113[key120] = val121;
          }
          input.readMapEnd();
          this.failed[key112] = val113;
        }
        input.readMapEnd();
      } else {
        input.skip(ftype);
      }
      break;
      case 3:
      if (ftype == Thrift.Type.MAP) {
        var _size122 = 0;
        var _rtmp3126;
        this.process_ms_avg = {};
        var _ktype123 = 0;
        var _vtype124 = 0;
        _rtmp3126 = input.readMapBegin();
        _ktype123 = _rtmp3126.ktype;
        _vtype124 = _rtmp3126.vtype;
        _size122 = _rtmp3126.size;
        for (var _i127 = 0; _i127 < _size122; ++_i127)
        {
          var key128 = null;
          var val129 = null;
          key128 = input.readString();
          var _size130 = 0;
          var _rtmp3134;
          val129 = {};
          var _ktype131 = 0;
          var _vtype132 = 0;
          _rtmp3134 = input.readMapBegin();
          _ktype131 = _rtmp3134.ktype;
          _vtype132 = _rtmp3134.vtype;
          _size130 = _rtmp3134.size;
          for (var _i135 = 0; _i135 < _size130; ++_i135)
          {
            var key136 = null;
            var val137 = null;
            key136 = new ttypes.GlobalStreamId();
            key136.read(input);
            val137 = input.readDouble();
            val129[key136] = val137;
          }
          input.readMapEnd();
          this.process_ms_avg[key128] = val129;
        }
        input.readMapEnd();
      } else {
        input.skip(ftype);
      }
      break;
      case 4:
      if (ftype == Thrift.Type.MAP) {
        var _size138 = 0;
        var _rtmp3142;
        this.executed = {};
        var _ktype139 = 0;
        var _vtype140 = 0;
        _rtmp3142 = input.readMapBegin();
        _ktype139 = _rtmp3142.ktype;
        _vtype140 = _rtmp3142.vtype;
        _size138 = _rtmp3142.size;
        for (var _i143 = 0; _i143 < _size138; ++_i143)
        {
          var key144 = null;
          var val145 = null;
          key144 = input.readString();
          var _size146 = 0;
          var _rtmp3150;
          val145 = {};
          var _ktype147 = 0;
          var _vtype148 = 0;
          _rtmp3150 = input.readMapBegin();
          _ktype147 = _rtmp3150.ktype;
          _vtype148 = _rtmp3150.vtype;
          _size146 = _rtmp3150.size;
          for (var _i151 = 0; _i151 < _size146; ++_i151)
          {
            var key152 = null;
            var val153 = null;
            key152 = new ttypes.GlobalStreamId();
            key152.read(input);
            val153 = input.readI64();
            val145[key152] = val153;
          }
          input.readMapEnd();
          this.executed[key144] = val145;
        }
        input.readMapEnd();
      } else {
        input.skip(ftype);
      }
      break;
      case 5:
      if (ftype == Thrift.Type.MAP) {
        var _size154 = 0;
        var _rtmp3158;
        this.execute_ms_avg = {};
        var _ktype155 = 0;
        var _vtype156 = 0;
        _rtmp3158 = input.readMapBegin();
        _ktype155 = _rtmp3158.ktype;
        _vtype156 = _rtmp3158.vtype;
        _size154 = _rtmp3158.size;
        for (var _i159 = 0; _i159 < _size154; ++_i159)
        {
          var key160 = null;
          var val161 = null;
          key160 = input.readString();
          var _size162 = 0;
          var _rtmp3166;
          val161 = {};
          var _ktype163 = 0;
          var _vtype164 = 0;
          _rtmp3166 = input.readMapBegin();
          _ktype163 = _rtmp3166.ktype;
          _vtype164 = _rtmp3166.vtype;
          _size162 = _rtmp3166.size;
          for (var _i167 = 0; _i167 < _size162; ++_i167)
          {
            var key168 = null;
            var val169 = null;
            key168 = new ttypes.GlobalStreamId();
            key168.read(input);
            val169 = input.readDouble();
            val161[key168] = val169;
          }
          input.readMapEnd();
          this.execute_ms_avg[key160] = val161;
        }
        input.readMapEnd();
      } else {
        input.skip(ftype);
      }
      break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

BoltStats.prototype.write = function(output) {
  output.writeStructBegin('BoltStats');
  if (this.acked !== null && this.acked !== undefined) {
    output.writeFieldBegin('acked', Thrift.Type.MAP, 1);
    output.writeMapBegin(Thrift.Type.STRING, Thrift.Type.MAP, Thrift.objectLength(this.acked));
    for (var kiter170 in this.acked)
    {
      if (this.acked.hasOwnProperty(kiter170))
      {
        var viter171 = this.acked[kiter170];
        output.writeString(kiter170);
        output.writeMapBegin(Thrift.Type.STRUCT, Thrift.Type.I64, Thrift.objectLength(viter171));
        for (var kiter172 in viter171)
        {
          if (viter171.hasOwnProperty(kiter172))
          {
            var viter173 = viter171[kiter172];
            kiter172.write(output);
            output.writeI64(viter173);
          }
        }
        output.writeMapEnd();
      }
    }
    output.writeMapEnd();
    output.writeFieldEnd();
  }
  if (this.failed !== null && this.failed !== undefined) {
    output.writeFieldBegin('failed', Thrift.Type.MAP, 2);
    output.writeMapBegin(Thrift.Type.STRING, Thrift.Type.MAP, Thrift.objectLength(this.failed));
    for (var kiter174 in this.failed)
    {
      if (this.failed.hasOwnProperty(kiter174))
      {
        var viter175 = this.failed[kiter174];
        output.writeString(kiter174);
        output.writeMapBegin(Thrift.Type.STRUCT, Thrift.Type.I64, Thrift.objectLength(viter175));
        for (var kiter176 in viter175)
        {
          if (viter175.hasOwnProperty(kiter176))
          {
            var viter177 = viter175[kiter176];
            kiter176.write(output);
            output.writeI64(viter177);
          }
        }
        output.writeMapEnd();
      }
    }
    output.writeMapEnd();
    output.writeFieldEnd();
  }
  if (this.process_ms_avg !== null && this.process_ms_avg !== undefined) {
    output.writeFieldBegin('process_ms_avg', Thrift.Type.MAP, 3);
    output.writeMapBegin(Thrift.Type.STRING, Thrift.Type.MAP, Thrift.objectLength(this.process_ms_avg));
    for (var kiter178 in this.process_ms_avg)
    {
      if (this.process_ms_avg.hasOwnProperty(kiter178))
      {
        var viter179 = this.process_ms_avg[kiter178];
        output.writeString(kiter178);
        output.writeMapBegin(Thrift.Type.STRUCT, Thrift.Type.DOUBLE, Thrift.objectLength(viter179));
        for (var kiter180 in viter179)
        {
          if (viter179.hasOwnProperty(kiter180))
          {
            var viter181 = viter179[kiter180];
            kiter180.write(output);
            output.writeDouble(viter181);
          }
        }
        output.writeMapEnd();
      }
    }
    output.writeMapEnd();
    output.writeFieldEnd();
  }
  if (this.executed !== null && this.executed !== undefined) {
    output.writeFieldBegin('executed', Thrift.Type.MAP, 4);
    output.writeMapBegin(Thrift.Type.STRING, Thrift.Type.MAP, Thrift.objectLength(this.executed));
    for (var kiter182 in this.executed)
    {
      if (this.executed.hasOwnProperty(kiter182))
      {
        var viter183 = this.executed[kiter182];
        output.writeString(kiter182);
        output.writeMapBegin(Thrift.Type.STRUCT, Thrift.Type.I64, Thrift.objectLength(viter183));
        for (var kiter184 in viter183)
        {
          if (viter183.hasOwnProperty(kiter184))
          {
            var viter185 = viter183[kiter184];
            kiter184.write(output);
            output.writeI64(viter185);
          }
        }
        output.writeMapEnd();
      }
    }
    output.writeMapEnd();
    output.writeFieldEnd();
  }
  if (this.execute_ms_avg !== null && this.execute_ms_avg !== undefined) {
    output.writeFieldBegin('execute_ms_avg', Thrift.Type.MAP, 5);
    output.writeMapBegin(Thrift.Type.STRING, Thrift.Type.MAP, Thrift.objectLength(this.execute_ms_avg));
    for (var kiter186 in this.execute_ms_avg)
    {
      if (this.execute_ms_avg.hasOwnProperty(kiter186))
      {
        var viter187 = this.execute_ms_avg[kiter186];
        output.writeString(kiter186);
        output.writeMapBegin(Thrift.Type.STRUCT, Thrift.Type.DOUBLE, Thrift.objectLength(viter187));
        for (var kiter188 in viter187)
        {
          if (viter187.hasOwnProperty(kiter188))
          {
            var viter189 = viter187[kiter188];
            kiter188.write(output);
            output.writeDouble(viter189);
          }
        }
        output.writeMapEnd();
      }
    }
    output.writeMapEnd();
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

SpoutStats = module.exports.SpoutStats = function(args) {
  this.acked = null;
  this.failed = null;
  this.complete_ms_avg = null;
  if (args) {
    if (args.acked !== undefined) {
      this.acked = args.acked;
    }
    if (args.failed !== undefined) {
      this.failed = args.failed;
    }
    if (args.complete_ms_avg !== undefined) {
      this.complete_ms_avg = args.complete_ms_avg;
    }
  }
};
SpoutStats.prototype = {};
SpoutStats.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
      if (ftype == Thrift.Type.MAP) {
        var _size190 = 0;
        var _rtmp3194;
        this.acked = {};
        var _ktype191 = 0;
        var _vtype192 = 0;
        _rtmp3194 = input.readMapBegin();
        _ktype191 = _rtmp3194.ktype;
        _vtype192 = _rtmp3194.vtype;
        _size190 = _rtmp3194.size;
        for (var _i195 = 0; _i195 < _size190; ++_i195)
        {
          var key196 = null;
          var val197 = null;
          key196 = input.readString();
          var _size198 = 0;
          var _rtmp3202;
          val197 = {};
          var _ktype199 = 0;
          var _vtype200 = 0;
          _rtmp3202 = input.readMapBegin();
          _ktype199 = _rtmp3202.ktype;
          _vtype200 = _rtmp3202.vtype;
          _size198 = _rtmp3202.size;
          for (var _i203 = 0; _i203 < _size198; ++_i203)
          {
            var key204 = null;
            var val205 = null;
            key204 = input.readString();
            val205 = input.readI64();
            val197[key204] = val205;
          }
          input.readMapEnd();
          this.acked[key196] = val197;
        }
        input.readMapEnd();
      } else {
        input.skip(ftype);
      }
      break;
      case 2:
      if (ftype == Thrift.Type.MAP) {
        var _size206 = 0;
        var _rtmp3210;
        this.failed = {};
        var _ktype207 = 0;
        var _vtype208 = 0;
        _rtmp3210 = input.readMapBegin();
        _ktype207 = _rtmp3210.ktype;
        _vtype208 = _rtmp3210.vtype;
        _size206 = _rtmp3210.size;
        for (var _i211 = 0; _i211 < _size206; ++_i211)
        {
          var key212 = null;
          var val213 = null;
          key212 = input.readString();
          var _size214 = 0;
          var _rtmp3218;
          val213 = {};
          var _ktype215 = 0;
          var _vtype216 = 0;
          _rtmp3218 = input.readMapBegin();
          _ktype215 = _rtmp3218.ktype;
          _vtype216 = _rtmp3218.vtype;
          _size214 = _rtmp3218.size;
          for (var _i219 = 0; _i219 < _size214; ++_i219)
          {
            var key220 = null;
            var val221 = null;
            key220 = input.readString();
            val221 = input.readI64();
            val213[key220] = val221;
          }
          input.readMapEnd();
          this.failed[key212] = val213;
        }
        input.readMapEnd();
      } else {
        input.skip(ftype);
      }
      break;
      case 3:
      if (ftype == Thrift.Type.MAP) {
        var _size222 = 0;
        var _rtmp3226;
        this.complete_ms_avg = {};
        var _ktype223 = 0;
        var _vtype224 = 0;
        _rtmp3226 = input.readMapBegin();
        _ktype223 = _rtmp3226.ktype;
        _vtype224 = _rtmp3226.vtype;
        _size222 = _rtmp3226.size;
        for (var _i227 = 0; _i227 < _size222; ++_i227)
        {
          var key228 = null;
          var val229 = null;
          key228 = input.readString();
          var _size230 = 0;
          var _rtmp3234;
          val229 = {};
          var _ktype231 = 0;
          var _vtype232 = 0;
          _rtmp3234 = input.readMapBegin();
          _ktype231 = _rtmp3234.ktype;
          _vtype232 = _rtmp3234.vtype;
          _size230 = _rtmp3234.size;
          for (var _i235 = 0; _i235 < _size230; ++_i235)
          {
            var key236 = null;
            var val237 = null;
            key236 = input.readString();
            val237 = input.readDouble();
            val229[key236] = val237;
          }
          input.readMapEnd();
          this.complete_ms_avg[key228] = val229;
        }
        input.readMapEnd();
      } else {
        input.skip(ftype);
      }
      break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

SpoutStats.prototype.write = function(output) {
  output.writeStructBegin('SpoutStats');
  if (this.acked !== null && this.acked !== undefined) {
    output.writeFieldBegin('acked', Thrift.Type.MAP, 1);
    output.writeMapBegin(Thrift.Type.STRING, Thrift.Type.MAP, Thrift.objectLength(this.acked));
    for (var kiter238 in this.acked)
    {
      if (this.acked.hasOwnProperty(kiter238))
      {
        var viter239 = this.acked[kiter238];
        output.writeString(kiter238);
        output.writeMapBegin(Thrift.Type.STRING, Thrift.Type.I64, Thrift.objectLength(viter239));
        for (var kiter240 in viter239)
        {
          if (viter239.hasOwnProperty(kiter240))
          {
            var viter241 = viter239[kiter240];
            output.writeString(kiter240);
            output.writeI64(viter241);
          }
        }
        output.writeMapEnd();
      }
    }
    output.writeMapEnd();
    output.writeFieldEnd();
  }
  if (this.failed !== null && this.failed !== undefined) {
    output.writeFieldBegin('failed', Thrift.Type.MAP, 2);
    output.writeMapBegin(Thrift.Type.STRING, Thrift.Type.MAP, Thrift.objectLength(this.failed));
    for (var kiter242 in this.failed)
    {
      if (this.failed.hasOwnProperty(kiter242))
      {
        var viter243 = this.failed[kiter242];
        output.writeString(kiter242);
        output.writeMapBegin(Thrift.Type.STRING, Thrift.Type.I64, Thrift.objectLength(viter243));
        for (var kiter244 in viter243)
        {
          if (viter243.hasOwnProperty(kiter244))
          {
            var viter245 = viter243[kiter244];
            output.writeString(kiter244);
            output.writeI64(viter245);
          }
        }
        output.writeMapEnd();
      }
    }
    output.writeMapEnd();
    output.writeFieldEnd();
  }
  if (this.complete_ms_avg !== null && this.complete_ms_avg !== undefined) {
    output.writeFieldBegin('complete_ms_avg', Thrift.Type.MAP, 3);
    output.writeMapBegin(Thrift.Type.STRING, Thrift.Type.MAP, Thrift.objectLength(this.complete_ms_avg));
    for (var kiter246 in this.complete_ms_avg)
    {
      if (this.complete_ms_avg.hasOwnProperty(kiter246))
      {
        var viter247 = this.complete_ms_avg[kiter246];
        output.writeString(kiter246);
        output.writeMapBegin(Thrift.Type.STRING, Thrift.Type.DOUBLE, Thrift.objectLength(viter247));
        for (var kiter248 in viter247)
        {
          if (viter247.hasOwnProperty(kiter248))
          {
            var viter249 = viter247[kiter248];
            output.writeString(kiter248);
            output.writeDouble(viter249);
          }
        }
        output.writeMapEnd();
      }
    }
    output.writeMapEnd();
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

ExecutorSpecificStats = module.exports.ExecutorSpecificStats = function(args) {
  this.bolt = null;
  this.spout = null;
  if (args) {
    if (args.bolt !== undefined) {
      this.bolt = args.bolt;
    }
    if (args.spout !== undefined) {
      this.spout = args.spout;
    }
  }
};
ExecutorSpecificStats.prototype = {};
ExecutorSpecificStats.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
      if (ftype == Thrift.Type.STRUCT) {
        this.bolt = new ttypes.BoltStats();
        this.bolt.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      case 2:
      if (ftype == Thrift.Type.STRUCT) {
        this.spout = new ttypes.SpoutStats();
        this.spout.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

ExecutorSpecificStats.prototype.write = function(output) {
  output.writeStructBegin('ExecutorSpecificStats');
  if (this.bolt !== null && this.bolt !== undefined) {
    output.writeFieldBegin('bolt', Thrift.Type.STRUCT, 1);
    this.bolt.write(output);
    output.writeFieldEnd();
  }
  if (this.spout !== null && this.spout !== undefined) {
    output.writeFieldBegin('spout', Thrift.Type.STRUCT, 2);
    this.spout.write(output);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

ExecutorStats = module.exports.ExecutorStats = function(args) {
  this.emitted = null;
  this.transferred = null;
  this.specific = null;
  if (args) {
    if (args.emitted !== undefined) {
      this.emitted = args.emitted;
    }
    if (args.transferred !== undefined) {
      this.transferred = args.transferred;
    }
    if (args.specific !== undefined) {
      this.specific = args.specific;
    }
  }
};
ExecutorStats.prototype = {};
ExecutorStats.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
      if (ftype == Thrift.Type.MAP) {
        var _size250 = 0;
        var _rtmp3254;
        this.emitted = {};
        var _ktype251 = 0;
        var _vtype252 = 0;
        _rtmp3254 = input.readMapBegin();
        _ktype251 = _rtmp3254.ktype;
        _vtype252 = _rtmp3254.vtype;
        _size250 = _rtmp3254.size;
        for (var _i255 = 0; _i255 < _size250; ++_i255)
        {
          var key256 = null;
          var val257 = null;
          key256 = input.readString();
          var _size258 = 0;
          var _rtmp3262;
          val257 = {};
          var _ktype259 = 0;
          var _vtype260 = 0;
          _rtmp3262 = input.readMapBegin();
          _ktype259 = _rtmp3262.ktype;
          _vtype260 = _rtmp3262.vtype;
          _size258 = _rtmp3262.size;
          for (var _i263 = 0; _i263 < _size258; ++_i263)
          {
            var key264 = null;
            var val265 = null;
            key264 = input.readString();
            val265 = input.readI64();
            val257[key264] = val265;
          }
          input.readMapEnd();
          this.emitted[key256] = val257;
        }
        input.readMapEnd();
      } else {
        input.skip(ftype);
      }
      break;
      case 2:
      if (ftype == Thrift.Type.MAP) {
        var _size266 = 0;
        var _rtmp3270;
        this.transferred = {};
        var _ktype267 = 0;
        var _vtype268 = 0;
        _rtmp3270 = input.readMapBegin();
        _ktype267 = _rtmp3270.ktype;
        _vtype268 = _rtmp3270.vtype;
        _size266 = _rtmp3270.size;
        for (var _i271 = 0; _i271 < _size266; ++_i271)
        {
          var key272 = null;
          var val273 = null;
          key272 = input.readString();
          var _size274 = 0;
          var _rtmp3278;
          val273 = {};
          var _ktype275 = 0;
          var _vtype276 = 0;
          _rtmp3278 = input.readMapBegin();
          _ktype275 = _rtmp3278.ktype;
          _vtype276 = _rtmp3278.vtype;
          _size274 = _rtmp3278.size;
          for (var _i279 = 0; _i279 < _size274; ++_i279)
          {
            var key280 = null;
            var val281 = null;
            key280 = input.readString();
            val281 = input.readI64();
            val273[key280] = val281;
          }
          input.readMapEnd();
          this.transferred[key272] = val273;
        }
        input.readMapEnd();
      } else {
        input.skip(ftype);
      }
      break;
      case 3:
      if (ftype == Thrift.Type.STRUCT) {
        this.specific = new ttypes.ExecutorSpecificStats();
        this.specific.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

ExecutorStats.prototype.write = function(output) {
  output.writeStructBegin('ExecutorStats');
  if (this.emitted !== null && this.emitted !== undefined) {
    output.writeFieldBegin('emitted', Thrift.Type.MAP, 1);
    output.writeMapBegin(Thrift.Type.STRING, Thrift.Type.MAP, Thrift.objectLength(this.emitted));
    for (var kiter282 in this.emitted)
    {
      if (this.emitted.hasOwnProperty(kiter282))
      {
        var viter283 = this.emitted[kiter282];
        output.writeString(kiter282);
        output.writeMapBegin(Thrift.Type.STRING, Thrift.Type.I64, Thrift.objectLength(viter283));
        for (var kiter284 in viter283)
        {
          if (viter283.hasOwnProperty(kiter284))
          {
            var viter285 = viter283[kiter284];
            output.writeString(kiter284);
            output.writeI64(viter285);
          }
        }
        output.writeMapEnd();
      }
    }
    output.writeMapEnd();
    output.writeFieldEnd();
  }
  if (this.transferred !== null && this.transferred !== undefined) {
    output.writeFieldBegin('transferred', Thrift.Type.MAP, 2);
    output.writeMapBegin(Thrift.Type.STRING, Thrift.Type.MAP, Thrift.objectLength(this.transferred));
    for (var kiter286 in this.transferred)
    {
      if (this.transferred.hasOwnProperty(kiter286))
      {
        var viter287 = this.transferred[kiter286];
        output.writeString(kiter286);
        output.writeMapBegin(Thrift.Type.STRING, Thrift.Type.I64, Thrift.objectLength(viter287));
        for (var kiter288 in viter287)
        {
          if (viter287.hasOwnProperty(kiter288))
          {
            var viter289 = viter287[kiter288];
            output.writeString(kiter288);
            output.writeI64(viter289);
          }
        }
        output.writeMapEnd();
      }
    }
    output.writeMapEnd();
    output.writeFieldEnd();
  }
  if (this.specific !== null && this.specific !== undefined) {
    output.writeFieldBegin('specific', Thrift.Type.STRUCT, 3);
    this.specific.write(output);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

ExecutorInfo = module.exports.ExecutorInfo = function(args) {
  this.task_start = null;
  this.task_end = null;
  if (args) {
    if (args.task_start !== undefined) {
      this.task_start = args.task_start;
    }
    if (args.task_end !== undefined) {
      this.task_end = args.task_end;
    }
  }
};
ExecutorInfo.prototype = {};
ExecutorInfo.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
      if (ftype == Thrift.Type.I32) {
        this.task_start = input.readI32();
      } else {
        input.skip(ftype);
      }
      break;
      case 2:
      if (ftype == Thrift.Type.I32) {
        this.task_end = input.readI32();
      } else {
        input.skip(ftype);
      }
      break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

ExecutorInfo.prototype.write = function(output) {
  output.writeStructBegin('ExecutorInfo');
  if (this.task_start !== null && this.task_start !== undefined) {
    output.writeFieldBegin('task_start', Thrift.Type.I32, 1);
    output.writeI32(this.task_start);
    output.writeFieldEnd();
  }
  if (this.task_end !== null && this.task_end !== undefined) {
    output.writeFieldBegin('task_end', Thrift.Type.I32, 2);
    output.writeI32(this.task_end);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

ExecutorSummary = module.exports.ExecutorSummary = function(args) {
  this.executor_info = null;
  this.component_id = null;
  this.host = null;
  this.port = null;
  this.uptime_secs = null;
  this.stats = null;
  if (args) {
    if (args.executor_info !== undefined) {
      this.executor_info = args.executor_info;
    }
    if (args.component_id !== undefined) {
      this.component_id = args.component_id;
    }
    if (args.host !== undefined) {
      this.host = args.host;
    }
    if (args.port !== undefined) {
      this.port = args.port;
    }
    if (args.uptime_secs !== undefined) {
      this.uptime_secs = args.uptime_secs;
    }
    if (args.stats !== undefined) {
      this.stats = args.stats;
    }
  }
};
ExecutorSummary.prototype = {};
ExecutorSummary.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
      if (ftype == Thrift.Type.STRUCT) {
        this.executor_info = new ttypes.ExecutorInfo();
        this.executor_info.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      case 2:
      if (ftype == Thrift.Type.STRING) {
        this.component_id = input.readString();
      } else {
        input.skip(ftype);
      }
      break;
      case 3:
      if (ftype == Thrift.Type.STRING) {
        this.host = input.readString();
      } else {
        input.skip(ftype);
      }
      break;
      case 4:
      if (ftype == Thrift.Type.I32) {
        this.port = input.readI32();
      } else {
        input.skip(ftype);
      }
      break;
      case 5:
      if (ftype == Thrift.Type.I32) {
        this.uptime_secs = input.readI32();
      } else {
        input.skip(ftype);
      }
      break;
      case 7:
      if (ftype == Thrift.Type.STRUCT) {
        this.stats = new ttypes.ExecutorStats();
        this.stats.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

ExecutorSummary.prototype.write = function(output) {
  output.writeStructBegin('ExecutorSummary');
  if (this.executor_info !== null && this.executor_info !== undefined) {
    output.writeFieldBegin('executor_info', Thrift.Type.STRUCT, 1);
    this.executor_info.write(output);
    output.writeFieldEnd();
  }
  if (this.component_id !== null && this.component_id !== undefined) {
    output.writeFieldBegin('component_id', Thrift.Type.STRING, 2);
    output.writeString(this.component_id);
    output.writeFieldEnd();
  }
  if (this.host !== null && this.host !== undefined) {
    output.writeFieldBegin('host', Thrift.Type.STRING, 3);
    output.writeString(this.host);
    output.writeFieldEnd();
  }
  if (this.port !== null && this.port !== undefined) {
    output.writeFieldBegin('port', Thrift.Type.I32, 4);
    output.writeI32(this.port);
    output.writeFieldEnd();
  }
  if (this.uptime_secs !== null && this.uptime_secs !== undefined) {
    output.writeFieldBegin('uptime_secs', Thrift.Type.I32, 5);
    output.writeI32(this.uptime_secs);
    output.writeFieldEnd();
  }
  if (this.stats !== null && this.stats !== undefined) {
    output.writeFieldBegin('stats', Thrift.Type.STRUCT, 7);
    this.stats.write(output);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

TopologyInfo = module.exports.TopologyInfo = function(args) {
  this.id = null;
  this.name = null;
  this.uptime_secs = null;
  this.executors = null;
  this.status = null;
  this.errors = null;
  if (args) {
    if (args.id !== undefined) {
      this.id = args.id;
    }
    if (args.name !== undefined) {
      this.name = args.name;
    }
    if (args.uptime_secs !== undefined) {
      this.uptime_secs = args.uptime_secs;
    }
    if (args.executors !== undefined) {
      this.executors = args.executors;
    }
    if (args.status !== undefined) {
      this.status = args.status;
    }
    if (args.errors !== undefined) {
      this.errors = args.errors;
    }
  }
};
TopologyInfo.prototype = {};
TopologyInfo.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
      if (ftype == Thrift.Type.STRING) {
        this.id = input.readString();
      } else {
        input.skip(ftype);
      }
      break;
      case 2:
      if (ftype == Thrift.Type.STRING) {
        this.name = input.readString();
      } else {
        input.skip(ftype);
      }
      break;
      case 3:
      if (ftype == Thrift.Type.I32) {
        this.uptime_secs = input.readI32();
      } else {
        input.skip(ftype);
      }
      break;
      case 4:
      if (ftype == Thrift.Type.LIST) {
        var _size290 = 0;
        var _rtmp3294;
        this.executors = [];
        var _etype293 = 0;
        _rtmp3294 = input.readListBegin();
        _etype293 = _rtmp3294.etype;
        _size290 = _rtmp3294.size;
        for (var _i295 = 0; _i295 < _size290; ++_i295)
        {
          var elem296 = null;
          elem296 = new ttypes.ExecutorSummary();
          elem296.read(input);
          this.executors.push(elem296);
        }
        input.readListEnd();
      } else {
        input.skip(ftype);
      }
      break;
      case 5:
      if (ftype == Thrift.Type.STRING) {
        this.status = input.readString();
      } else {
        input.skip(ftype);
      }
      break;
      case 6:
      if (ftype == Thrift.Type.MAP) {
        var _size297 = 0;
        var _rtmp3301;
        this.errors = {};
        var _ktype298 = 0;
        var _vtype299 = 0;
        _rtmp3301 = input.readMapBegin();
        _ktype298 = _rtmp3301.ktype;
        _vtype299 = _rtmp3301.vtype;
        _size297 = _rtmp3301.size;
        for (var _i302 = 0; _i302 < _size297; ++_i302)
        {
          var key303 = null;
          var val304 = null;
          key303 = input.readString();
          var _size305 = 0;
          var _rtmp3309;
          val304 = [];
          var _etype308 = 0;
          _rtmp3309 = input.readListBegin();
          _etype308 = _rtmp3309.etype;
          _size305 = _rtmp3309.size;
          for (var _i310 = 0; _i310 < _size305; ++_i310)
          {
            var elem311 = null;
            elem311 = new ttypes.ErrorInfo();
            elem311.read(input);
            val304.push(elem311);
          }
          input.readListEnd();
          this.errors[key303] = val304;
        }
        input.readMapEnd();
      } else {
        input.skip(ftype);
      }
      break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

TopologyInfo.prototype.write = function(output) {
  output.writeStructBegin('TopologyInfo');
  if (this.id !== null && this.id !== undefined) {
    output.writeFieldBegin('id', Thrift.Type.STRING, 1);
    output.writeString(this.id);
    output.writeFieldEnd();
  }
  if (this.name !== null && this.name !== undefined) {
    output.writeFieldBegin('name', Thrift.Type.STRING, 2);
    output.writeString(this.name);
    output.writeFieldEnd();
  }
  if (this.uptime_secs !== null && this.uptime_secs !== undefined) {
    output.writeFieldBegin('uptime_secs', Thrift.Type.I32, 3);
    output.writeI32(this.uptime_secs);
    output.writeFieldEnd();
  }
  if (this.executors !== null && this.executors !== undefined) {
    output.writeFieldBegin('executors', Thrift.Type.LIST, 4);
    output.writeListBegin(Thrift.Type.STRUCT, this.executors.length);
    for (var iter312 in this.executors)
    {
      if (this.executors.hasOwnProperty(iter312))
      {
        iter312 = this.executors[iter312];
        iter312.write(output);
      }
    }
    output.writeListEnd();
    output.writeFieldEnd();
  }
  if (this.status !== null && this.status !== undefined) {
    output.writeFieldBegin('status', Thrift.Type.STRING, 5);
    output.writeString(this.status);
    output.writeFieldEnd();
  }
  if (this.errors !== null && this.errors !== undefined) {
    output.writeFieldBegin('errors', Thrift.Type.MAP, 6);
    output.writeMapBegin(Thrift.Type.STRING, Thrift.Type.LIST, Thrift.objectLength(this.errors));
    for (var kiter313 in this.errors)
    {
      if (this.errors.hasOwnProperty(kiter313))
      {
        var viter314 = this.errors[kiter313];
        output.writeString(kiter313);
        output.writeListBegin(Thrift.Type.STRUCT, viter314.length);
        for (var iter315 in viter314)
        {
          if (viter314.hasOwnProperty(iter315))
          {
            iter315 = viter314[iter315];
            iter315.write(output);
          }
        }
        output.writeListEnd();
      }
    }
    output.writeMapEnd();
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

KillOptions = module.exports.KillOptions = function(args) {
  this.wait_secs = null;
  if (args) {
    if (args.wait_secs !== undefined) {
      this.wait_secs = args.wait_secs;
    }
  }
};
KillOptions.prototype = {};
KillOptions.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
      if (ftype == Thrift.Type.I32) {
        this.wait_secs = input.readI32();
      } else {
        input.skip(ftype);
      }
      break;
      case 0:
        input.skip(ftype);
        break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

KillOptions.prototype.write = function(output) {
  output.writeStructBegin('KillOptions');
  if (this.wait_secs !== null && this.wait_secs !== undefined) {
    output.writeFieldBegin('wait_secs', Thrift.Type.I32, 1);
    output.writeI32(this.wait_secs);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

RebalanceOptions = module.exports.RebalanceOptions = function(args) {
  this.wait_secs = null;
  this.num_workers = null;
  this.num_executors = null;
  if (args) {
    if (args.wait_secs !== undefined) {
      this.wait_secs = args.wait_secs;
    }
    if (args.num_workers !== undefined) {
      this.num_workers = args.num_workers;
    }
    if (args.num_executors !== undefined) {
      this.num_executors = args.num_executors;
    }
  }
};
RebalanceOptions.prototype = {};
RebalanceOptions.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
      if (ftype == Thrift.Type.I32) {
        this.wait_secs = input.readI32();
      } else {
        input.skip(ftype);
      }
      break;
      case 2:
      if (ftype == Thrift.Type.I32) {
        this.num_workers = input.readI32();
      } else {
        input.skip(ftype);
      }
      break;
      case 3:
      if (ftype == Thrift.Type.MAP) {
        var _size316 = 0;
        var _rtmp3320;
        this.num_executors = {};
        var _ktype317 = 0;
        var _vtype318 = 0;
        _rtmp3320 = input.readMapBegin();
        _ktype317 = _rtmp3320.ktype;
        _vtype318 = _rtmp3320.vtype;
        _size316 = _rtmp3320.size;
        for (var _i321 = 0; _i321 < _size316; ++_i321)
        {
          var key322 = null;
          var val323 = null;
          key322 = input.readString();
          val323 = input.readI32();
          this.num_executors[key322] = val323;
        }
        input.readMapEnd();
      } else {
        input.skip(ftype);
      }
      break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

RebalanceOptions.prototype.write = function(output) {
  output.writeStructBegin('RebalanceOptions');
  if (this.wait_secs !== null && this.wait_secs !== undefined) {
    output.writeFieldBegin('wait_secs', Thrift.Type.I32, 1);
    output.writeI32(this.wait_secs);
    output.writeFieldEnd();
  }
  if (this.num_workers !== null && this.num_workers !== undefined) {
    output.writeFieldBegin('num_workers', Thrift.Type.I32, 2);
    output.writeI32(this.num_workers);
    output.writeFieldEnd();
  }
  if (this.num_executors !== null && this.num_executors !== undefined) {
    output.writeFieldBegin('num_executors', Thrift.Type.MAP, 3);
    output.writeMapBegin(Thrift.Type.STRING, Thrift.Type.I32, Thrift.objectLength(this.num_executors));
    for (var kiter324 in this.num_executors)
    {
      if (this.num_executors.hasOwnProperty(kiter324))
      {
        var viter325 = this.num_executors[kiter324];
        output.writeString(kiter324);
        output.writeI32(viter325);
      }
    }
    output.writeMapEnd();
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

SubmitOptions = module.exports.SubmitOptions = function(args) {
  this.initial_status = null;
  if (args) {
    if (args.initial_status !== undefined) {
      this.initial_status = args.initial_status;
    }
  }
};
SubmitOptions.prototype = {};
SubmitOptions.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
      if (ftype == Thrift.Type.I32) {
        this.initial_status = input.readI32();
      } else {
        input.skip(ftype);
      }
      break;
      case 0:
        input.skip(ftype);
        break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

SubmitOptions.prototype.write = function(output) {
  output.writeStructBegin('SubmitOptions');
  if (this.initial_status !== null && this.initial_status !== undefined) {
    output.writeFieldBegin('initial_status', Thrift.Type.I32, 1);
    output.writeI32(this.initial_status);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

DRPCRequest = module.exports.DRPCRequest = function(args) {
  this.func_args = null;
  this.request_id = null;
  if (args) {
    if (args.func_args !== undefined) {
      this.func_args = args.func_args;
    }
    if (args.request_id !== undefined) {
      this.request_id = args.request_id;
    }
  }
};
DRPCRequest.prototype = {};
DRPCRequest.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
      if (ftype == Thrift.Type.STRING) {
        this.func_args = input.readString();
      } else {
        input.skip(ftype);
      }
      break;
      case 2:
      if (ftype == Thrift.Type.STRING) {
        this.request_id = input.readString();
      } else {
        input.skip(ftype);
      }
      break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

DRPCRequest.prototype.write = function(output) {
  output.writeStructBegin('DRPCRequest');
  if (this.func_args !== null && this.func_args !== undefined) {
    output.writeFieldBegin('func_args', Thrift.Type.STRING, 1);
    output.writeString(this.func_args);
    output.writeFieldEnd();
  }
  if (this.request_id !== null && this.request_id !== undefined) {
    output.writeFieldBegin('request_id', Thrift.Type.STRING, 2);
    output.writeString(this.request_id);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

DRPCExecutionException = module.exports.DRPCExecutionException = function(args) {
  Thrift.TException.call(this, "DRPCExecutionException")
  this.name = "DRPCExecutionException"
  this.msg = null;
  if (args) {
    if (args.msg !== undefined) {
      this.msg = args.msg;
    }
  }
};
Thrift.inherits(DRPCExecutionException, Thrift.TException);
DRPCExecutionException.prototype.name = 'DRPCExecutionException';
DRPCExecutionException.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
      if (ftype == Thrift.Type.STRING) {
        this.msg = input.readString();
      } else {
        input.skip(ftype);
      }
      break;
      case 0:
        input.skip(ftype);
        break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

DRPCExecutionException.prototype.write = function(output) {
  output.writeStructBegin('DRPCExecutionException');
  if (this.msg !== null && this.msg !== undefined) {
    output.writeFieldBegin('msg', Thrift.Type.STRING, 1);
    output.writeString(this.msg);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

